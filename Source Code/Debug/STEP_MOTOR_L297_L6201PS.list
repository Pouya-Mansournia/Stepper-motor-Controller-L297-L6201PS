
STEP_MOTOR_L297_L6201PS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004780  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  0800488c  0800488c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad8  08004ad8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004ad8  08004ad8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ad8  08004ad8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000078  08004b58  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08004b58  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcb2  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002207  00000000  00000000  0002bd53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0002df60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  0002ec68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d18  00000000  00000000  0002f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e728  00000000  00000000  00048560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc2f  00000000  00000000  00056c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e28b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  000e2908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004874 	.word	0x08004874

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004874 	.word	0x08004874

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b2d      	ldr	r3, [pc, #180]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a2c      	ldr	r2, [pc, #176]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b2a      	ldr	r3, [pc, #168]	; (8000218 <MX_GPIO_Init+0xcc>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000178:	4b27      	ldr	r3, [pc, #156]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a26      	ldr	r2, [pc, #152]	; (8000218 <MX_GPIO_Init+0xcc>)
 800017e:	f043 0308 	orr.w	r3, r3, #8
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b24      	ldr	r3, [pc, #144]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0308 	and.w	r3, r3, #8
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b21      	ldr	r3, [pc, #132]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a20      	ldr	r2, [pc, #128]	; (8000218 <MX_GPIO_Init+0xcc>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b1e      	ldr	r3, [pc, #120]	; (8000218 <MX_GPIO_Init+0xcc>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RES_HALF_FULL_Pin|DIR_OUT1_Pin|ENABLE_Pin|LED_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 7116 	mov.w	r1, #600	; 0x258
 80001ae:	481b      	ldr	r0, [pc, #108]	; (800021c <MX_GPIO_Init+0xd0>)
 80001b0:	f001 fa0d 	bl	80015ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CONTROL_GPIO_Port, CONTROL_Pin, GPIO_PIN_SET);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2120      	movs	r1, #32
 80001b8:	4818      	ldr	r0, [pc, #96]	; (800021c <MX_GPIO_Init+0xd0>)
 80001ba:	f001 fa08 	bl	80015ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 80001be:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 80001c2:	613b      	str	r3, [r7, #16]
                          |SW5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001c4:	2300      	movs	r3, #0
 80001c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001c8:	2301      	movs	r3, #1
 80001ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001cc:	f107 0310 	add.w	r3, r7, #16
 80001d0:	4619      	mov	r1, r3
 80001d2:	4812      	ldr	r0, [pc, #72]	; (800021c <MX_GPIO_Init+0xd0>)
 80001d4:	f001 f860 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW6_Pin;
 80001d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001e2:	2301      	movs	r3, #1
 80001e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW6_GPIO_Port, &GPIO_InitStruct);
 80001e6:	f107 0310 	add.w	r3, r7, #16
 80001ea:	4619      	mov	r1, r3
 80001ec:	480c      	ldr	r0, [pc, #48]	; (8000220 <MX_GPIO_Init+0xd4>)
 80001ee:	f001 f853 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = RES_HALF_FULL_Pin|DIR_OUT1_Pin|CONTROL_Pin|ENABLE_Pin
 80001f2:	f44f 731e 	mov.w	r3, #632	; 0x278
 80001f6:	613b      	str	r3, [r7, #16]
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f8:	2301      	movs	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2302      	movs	r3, #2
 8000202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000204:	f107 0310 	add.w	r3, r7, #16
 8000208:	4619      	mov	r1, r3
 800020a:	4804      	ldr	r0, [pc, #16]	; (800021c <MX_GPIO_Init+0xd0>)
 800020c:	f001 f844 	bl	8001298 <HAL_GPIO_Init>

}
 8000210:	bf00      	nop
 8000212:	3720      	adds	r7, #32
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010c00 	.word	0x40010c00
 8000220:	40010800 	.word	0x40010800

08000224 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <DWT_Delay_us+0x44>)
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000232:	f001 fdd3 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8000236:	4603      	mov	r3, r0
 8000238:	4a0c      	ldr	r2, [pc, #48]	; (800026c <DWT_Delay_us+0x48>)
 800023a:	fba2 2303 	umull	r2, r3, r2, r3
 800023e:	0c9b      	lsrs	r3, r3, #18
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	fb02 f303 	mul.w	r3, r2, r3
 8000246:	607b      	str	r3, [r7, #4]
  i=microseconds;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	60bb      	str	r3, [r7, #8]
  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < i);
 800024c:	bf00      	nop
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <DWT_Delay_us+0x44>)
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	1ad3      	subs	r3, r2, r3
 8000256:	68ba      	ldr	r2, [r7, #8]
 8000258:	429a      	cmp	r2, r3
 800025a:	d8f8      	bhi.n	800024e <DWT_Delay_us+0x2a>
}
 800025c:	bf00      	nop
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	e0001000 	.word	0xe0001000
 800026c:	431bde83 	.word	0x431bde83

08000270 <__io_putchar>:
	#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
	#endif

	PUTCHAR_PROTOTYPE
	{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	    HAL_UART_Transmit(&huart1,(uint8_t*)&ch,1,100);
 8000278:	1d39      	adds	r1, r7, #4
 800027a:	2364      	movs	r3, #100	; 0x64
 800027c:	2201      	movs	r2, #1
 800027e:	4804      	ldr	r0, [pc, #16]	; (8000290 <__io_putchar+0x20>)
 8000280:	f002 fe19 	bl	8002eb6 <HAL_UART_Transmit>

		return ch;
 8000284:	687b      	ldr	r3, [r7, #4]

	}
 8000286:	4618      	mov	r0, r3
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000158 	.word	0x20000158

08000294 <read_sw_switch>:




void read_sw_switch()
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

		if(!READ_SW1)
 8000298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800029c:	4841      	ldr	r0, [pc, #260]	; (80003a4 <read_sw_switch+0x110>)
 800029e:	f001 f97f 	bl	80015a0 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d103      	bne.n	80002b0 <read_sw_switch+0x1c>
		{
		  board_id1='1';
 80002a8:	4b3f      	ldr	r3, [pc, #252]	; (80003a8 <read_sw_switch+0x114>)
 80002aa:	2231      	movs	r2, #49	; 0x31
 80002ac:	701a      	strb	r2, [r3, #0]
 80002ae:	e002      	b.n	80002b6 <read_sw_switch+0x22>
		}
		else
		{
		  board_id1='0';
 80002b0:	4b3d      	ldr	r3, [pc, #244]	; (80003a8 <read_sw_switch+0x114>)
 80002b2:	2230      	movs	r2, #48	; 0x30
 80002b4:	701a      	strb	r2, [r3, #0]
		}


		if(!READ_SW2)
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	483a      	ldr	r0, [pc, #232]	; (80003a4 <read_sw_switch+0x110>)
 80002bc:	f001 f970 	bl	80015a0 <HAL_GPIO_ReadPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d103      	bne.n	80002ce <read_sw_switch+0x3a>
		{
		  board_id2='1';
 80002c6:	4b39      	ldr	r3, [pc, #228]	; (80003ac <read_sw_switch+0x118>)
 80002c8:	2231      	movs	r2, #49	; 0x31
 80002ca:	701a      	strb	r2, [r3, #0]
 80002cc:	e002      	b.n	80002d4 <read_sw_switch+0x40>
		}
		else
		{
		  board_id2='0';
 80002ce:	4b37      	ldr	r3, [pc, #220]	; (80003ac <read_sw_switch+0x118>)
 80002d0:	2230      	movs	r2, #48	; 0x30
 80002d2:	701a      	strb	r2, [r3, #0]
		}


		if(!READ_SW3)
 80002d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d8:	4832      	ldr	r0, [pc, #200]	; (80003a4 <read_sw_switch+0x110>)
 80002da:	f001 f961 	bl	80015a0 <HAL_GPIO_ReadPin>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d103      	bne.n	80002ec <read_sw_switch+0x58>
		{
		  board_id3='1';
 80002e4:	4b32      	ldr	r3, [pc, #200]	; (80003b0 <read_sw_switch+0x11c>)
 80002e6:	2231      	movs	r2, #49	; 0x31
 80002e8:	701a      	strb	r2, [r3, #0]
 80002ea:	e002      	b.n	80002f2 <read_sw_switch+0x5e>
		}
		else
		{
		  board_id3='0';
 80002ec:	4b30      	ldr	r3, [pc, #192]	; (80003b0 <read_sw_switch+0x11c>)
 80002ee:	2230      	movs	r2, #48	; 0x30
 80002f0:	701a      	strb	r2, [r3, #0]
		}


		if(!READ_SW4)
 80002f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002f6:	482b      	ldr	r0, [pc, #172]	; (80003a4 <read_sw_switch+0x110>)
 80002f8:	f001 f952 	bl	80015a0 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d103      	bne.n	800030a <read_sw_switch+0x76>
		{
		  board_id4='1';
 8000302:	4b2c      	ldr	r3, [pc, #176]	; (80003b4 <read_sw_switch+0x120>)
 8000304:	2231      	movs	r2, #49	; 0x31
 8000306:	701a      	strb	r2, [r3, #0]
 8000308:	e002      	b.n	8000310 <read_sw_switch+0x7c>
		}
		else
		{
		  board_id4='0';
 800030a:	4b2a      	ldr	r3, [pc, #168]	; (80003b4 <read_sw_switch+0x120>)
 800030c:	2230      	movs	r2, #48	; 0x30
 800030e:	701a      	strb	r2, [r3, #0]
		}



	   if(!READ_SW6)
 8000310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000314:	4828      	ldr	r0, [pc, #160]	; (80003b8 <read_sw_switch+0x124>)
 8000316:	f001 f943 	bl	80015a0 <HAL_GPIO_ReadPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d13f      	bne.n	80003a0 <read_sw_switch+0x10c>
	  {

			   if(!pwm_mode)
 8000320:	4b26      	ldr	r3, [pc, #152]	; (80003bc <read_sw_switch+0x128>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	f083 0301 	eor.w	r3, r3, #1
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	d019      	beq.n	8000362 <read_sw_switch+0xce>
			   {
					send_set_step_dir_DLY_x_axis(1000  , CCW  , speed);
 800032e:	4b24      	ldr	r3, [pc, #144]	; (80003c0 <read_sw_switch+0x12c>)
 8000330:	881b      	ldrh	r3, [r3, #0]
 8000332:	461a      	mov	r2, r3
 8000334:	2101      	movs	r1, #1
 8000336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800033a:	f000 f999 	bl	8000670 <send_set_step_dir_DLY_x_axis>
					HAL_Delay(2000);
 800033e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000342:	f000 fe01 	bl	8000f48 <HAL_Delay>
					send_set_step_dir_DLY_x_axis(1000  , CW  , speed);
 8000346:	4b1e      	ldr	r3, [pc, #120]	; (80003c0 <read_sw_switch+0x12c>)
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	461a      	mov	r2, r3
 800034c:	f04f 31ff 	mov.w	r1, #4294967295
 8000350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000354:	f000 f98c 	bl	8000670 <send_set_step_dir_DLY_x_axis>
					HAL_Delay(2000);
 8000358:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800035c:	f000 fdf4 	bl	8000f48 <HAL_Delay>
 8000360:	e018      	b.n	8000394 <read_sw_switch+0x100>
			   }
			   else
			   {
			       send_set_step_dir_PWM_X_axis(1000  , CCW , speed);
 8000362:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <read_sw_switch+0x12c>)
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	461a      	mov	r2, r3
 8000368:	2101      	movs	r1, #1
 800036a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800036e:	f000 f9f7 	bl	8000760 <send_set_step_dir_PWM_X_axis>
				   HAL_Delay(2000);
 8000372:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000376:	f000 fde7 	bl	8000f48 <HAL_Delay>
				   send_set_step_dir_PWM_X_axis(1000  ,  CW , speed);
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <read_sw_switch+0x12c>)
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	461a      	mov	r2, r3
 8000380:	f04f 31ff 	mov.w	r1, #4294967295
 8000384:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000388:	f000 f9ea 	bl	8000760 <send_set_step_dir_PWM_X_axis>
				   HAL_Delay(2000);
 800038c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000390:	f000 fdda 	bl	8000f48 <HAL_Delay>
			   }

			   speed+=50;
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <read_sw_switch+0x12c>)
 8000396:	881b      	ldrh	r3, [r3, #0]
 8000398:	3332      	adds	r3, #50	; 0x32
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <read_sw_switch+0x12c>)
 800039e:	801a      	strh	r2, [r3, #0]

	  }


 }
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	20000004 	.word	0x20000004
 80003ac:	20000005 	.word	0x20000005
 80003b0:	20000006 	.word	0x20000006
 80003b4:	20000007 	.word	0x20000007
 80003b8:	40010800 	.word	0x40010800
 80003bc:	20000000 	.word	0x20000000
 80003c0:	20000002 	.word	0x20000002

080003c4 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003c4:	b5b0      	push	{r4, r5, r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	  uint8_t i;

		if(huart->Instance==USART1)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a94      	ldr	r2, [pc, #592]	; (8000624 <HAL_UART_RxCpltCallback+0x260>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	f040 8122 	bne.w	800061c <HAL_UART_RxCpltCallback+0x258>
		{

			//putchar((uint8_t)Rx_data[0]);


				if(Rx_indx==0){ for(i=0 ; i<100 ; i++ )Rx_Buffer[i]=0;}
 80003d8:	4b93      	ldr	r3, [pc, #588]	; (8000628 <HAL_UART_RxCpltCallback+0x264>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d10c      	bne.n	80003fa <HAL_UART_RxCpltCallback+0x36>
 80003e0:	2300      	movs	r3, #0
 80003e2:	77fb      	strb	r3, [r7, #31]
 80003e4:	e006      	b.n	80003f4 <HAL_UART_RxCpltCallback+0x30>
 80003e6:	7ffb      	ldrb	r3, [r7, #31]
 80003e8:	4a90      	ldr	r2, [pc, #576]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80003ea:	2100      	movs	r1, #0
 80003ec:	54d1      	strb	r1, [r2, r3]
 80003ee:	7ffb      	ldrb	r3, [r7, #31]
 80003f0:	3301      	adds	r3, #1
 80003f2:	77fb      	strb	r3, [r7, #31]
 80003f4:	7ffb      	ldrb	r3, [r7, #31]
 80003f6:	2b63      	cmp	r3, #99	; 0x63
 80003f8:	d9f5      	bls.n	80003e6 <HAL_UART_RxCpltCallback+0x22>


				if(Rx_data[0]!='*') //cr lf '\r' | '\n'
 80003fa:	4b8d      	ldr	r3, [pc, #564]	; (8000630 <HAL_UART_RxCpltCallback+0x26c>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b2a      	cmp	r3, #42	; 0x2a
 8000400:	d00b      	beq.n	800041a <HAL_UART_RxCpltCallback+0x56>
				{
				  Rx_Buffer[Rx_indx++]=Rx_data[0];
 8000402:	4b89      	ldr	r3, [pc, #548]	; (8000628 <HAL_UART_RxCpltCallback+0x264>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	1c5a      	adds	r2, r3, #1
 8000408:	b2d1      	uxtb	r1, r2
 800040a:	4a87      	ldr	r2, [pc, #540]	; (8000628 <HAL_UART_RxCpltCallback+0x264>)
 800040c:	7011      	strb	r1, [r2, #0]
 800040e:	461a      	mov	r2, r3
 8000410:	4b87      	ldr	r3, [pc, #540]	; (8000630 <HAL_UART_RxCpltCallback+0x26c>)
 8000412:	7819      	ldrb	r1, [r3, #0]
 8000414:	4b85      	ldr	r3, [pc, #532]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000416:	5499      	strb	r1, [r3, r2]
 8000418:	e0fb      	b.n	8000612 <HAL_UART_RxCpltCallback+0x24e>
				}
				else
				{
				   Rx_indx=0;
 800041a:	4b83      	ldr	r3, [pc, #524]	; (8000628 <HAL_UART_RxCpltCallback+0x264>)
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]
				   Transfer_flag=1;
 8000420:	4b84      	ldr	r3, [pc, #528]	; (8000634 <HAL_UART_RxCpltCallback+0x270>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]




				   if( Rx_Buffer[0] == 'A' && Rx_Buffer[1] == board_id1 && Rx_Buffer[2] == board_id2 && Rx_Buffer[3] == board_id3 && Rx_Buffer[4] == board_id4 )
 8000426:	4b81      	ldr	r3, [pc, #516]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b41      	cmp	r3, #65	; 0x41
 800042c:	d177      	bne.n	800051e <HAL_UART_RxCpltCallback+0x15a>
 800042e:	4b7f      	ldr	r3, [pc, #508]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000430:	785a      	ldrb	r2, [r3, #1]
 8000432:	4b81      	ldr	r3, [pc, #516]	; (8000638 <HAL_UART_RxCpltCallback+0x274>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	429a      	cmp	r2, r3
 8000438:	d171      	bne.n	800051e <HAL_UART_RxCpltCallback+0x15a>
 800043a:	4b7c      	ldr	r3, [pc, #496]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 800043c:	789a      	ldrb	r2, [r3, #2]
 800043e:	4b7f      	ldr	r3, [pc, #508]	; (800063c <HAL_UART_RxCpltCallback+0x278>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	429a      	cmp	r2, r3
 8000444:	d16b      	bne.n	800051e <HAL_UART_RxCpltCallback+0x15a>
 8000446:	4b79      	ldr	r3, [pc, #484]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000448:	78da      	ldrb	r2, [r3, #3]
 800044a:	4b7d      	ldr	r3, [pc, #500]	; (8000640 <HAL_UART_RxCpltCallback+0x27c>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	429a      	cmp	r2, r3
 8000450:	d165      	bne.n	800051e <HAL_UART_RxCpltCallback+0x15a>
 8000452:	4b76      	ldr	r3, [pc, #472]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000454:	791a      	ldrb	r2, [r3, #4]
 8000456:	4b7b      	ldr	r3, [pc, #492]	; (8000644 <HAL_UART_RxCpltCallback+0x280>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	429a      	cmp	r2, r3
 800045c:	d15f      	bne.n	800051e <HAL_UART_RxCpltCallback+0x15a>
				   {

						   char mstep[10] ="00000000";
 800045e:	4a7a      	ldr	r2, [pc, #488]	; (8000648 <HAL_UART_RxCpltCallback+0x284>)
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	ca07      	ldmia	r2, {r0, r1, r2}
 8000466:	c303      	stmia	r3!, {r0, r1}
 8000468:	701a      	strb	r2, [r3, #0]
 800046a:	2300      	movs	r3, #0
 800046c:	777b      	strb	r3, [r7, #29]
						   char mspeed[6]="0000";
 800046e:	4a77      	ldr	r2, [pc, #476]	; (800064c <HAL_UART_RxCpltCallback+0x288>)
 8000470:	f107 030c 	add.w	r3, r7, #12
 8000474:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000478:	6018      	str	r0, [r3, #0]
 800047a:	3304      	adds	r3, #4
 800047c:	7019      	strb	r1, [r3, #0]
 800047e:	2300      	movs	r3, #0
 8000480:	747b      	strb	r3, [r7, #17]

						   mspeed[0]=Rx_Buffer[17];
 8000482:	4b6a      	ldr	r3, [pc, #424]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000484:	7c5b      	ldrb	r3, [r3, #17]
 8000486:	733b      	strb	r3, [r7, #12]
						   mspeed[1]=Rx_Buffer[18];
 8000488:	4b68      	ldr	r3, [pc, #416]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 800048a:	7c9b      	ldrb	r3, [r3, #18]
 800048c:	737b      	strb	r3, [r7, #13]
						   mspeed[2]=Rx_Buffer[19];
 800048e:	4b67      	ldr	r3, [pc, #412]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000490:	7cdb      	ldrb	r3, [r3, #19]
 8000492:	73bb      	strb	r3, [r7, #14]
						   mspeed[3]=Rx_Buffer[20];
 8000494:	4b65      	ldr	r3, [pc, #404]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000496:	7d1b      	ldrb	r3, [r3, #20]
 8000498:	73fb      	strb	r3, [r7, #15]

						   mstep[0]=Rx_Buffer[8];
 800049a:	4b64      	ldr	r3, [pc, #400]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 800049c:	7a1b      	ldrb	r3, [r3, #8]
 800049e:	753b      	strb	r3, [r7, #20]
						   mstep[1]=Rx_Buffer[9];
 80004a0:	4b62      	ldr	r3, [pc, #392]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80004a2:	7a5b      	ldrb	r3, [r3, #9]
 80004a4:	757b      	strb	r3, [r7, #21]
						   mstep[2]=Rx_Buffer[10];
 80004a6:	4b61      	ldr	r3, [pc, #388]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80004a8:	7a9b      	ldrb	r3, [r3, #10]
 80004aa:	75bb      	strb	r3, [r7, #22]
						   mstep[3]=Rx_Buffer[11];
 80004ac:	4b5f      	ldr	r3, [pc, #380]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80004ae:	7adb      	ldrb	r3, [r3, #11]
 80004b0:	75fb      	strb	r3, [r7, #23]
						   mstep[4]=Rx_Buffer[12];
 80004b2:	4b5e      	ldr	r3, [pc, #376]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80004b4:	7b1b      	ldrb	r3, [r3, #12]
 80004b6:	763b      	strb	r3, [r7, #24]
						   mstep[5]=Rx_Buffer[13];
 80004b8:	4b5c      	ldr	r3, [pc, #368]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80004ba:	7b5b      	ldrb	r3, [r3, #13]
 80004bc:	767b      	strb	r3, [r7, #25]
						   mstep[6]=Rx_Buffer[14];
 80004be:	4b5b      	ldr	r3, [pc, #364]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80004c0:	7b9b      	ldrb	r3, [r3, #14]
 80004c2:	76bb      	strb	r3, [r7, #26]
						   mstep[7]=Rx_Buffer[15];
 80004c4:	4b59      	ldr	r3, [pc, #356]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80004c6:	7bdb      	ldrb	r3, [r3, #15]
 80004c8:	76fb      	strb	r3, [r7, #27]



						   uint8_t mdir = (Rx_Buffer[6])-48;
 80004ca:	4b58      	ldr	r3, [pc, #352]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80004cc:	799b      	ldrb	r3, [r3, #6]
 80004ce:	3b30      	subs	r3, #48	; 0x30
 80004d0:	77bb      	strb	r3, [r7, #30]

						   printf("step=%d, speed=%d, dir:%d\n", atoi(mstep),atoi(mspeed) , mdir );
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 f906 	bl	80036e8 <atoi>
 80004dc:	4604      	mov	r4, r0
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 f900 	bl	80036e8 <atoi>
 80004e8:	4602      	mov	r2, r0
 80004ea:	7fbb      	ldrb	r3, [r7, #30]
 80004ec:	4621      	mov	r1, r4
 80004ee:	4858      	ldr	r0, [pc, #352]	; (8000650 <HAL_UART_RxCpltCallback+0x28c>)
 80004f0:	f003 f930 	bl	8003754 <iprintf>


						   send_set_step_dir_PWM_X_axis(   atoi(mstep) ,  mdir  ,   atoi(mspeed)  );
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	4618      	mov	r0, r3
 80004fa:	f003 f8f5 	bl	80036e8 <atoi>
 80004fe:	4603      	mov	r3, r0
 8000500:	461d      	mov	r5, r3
 8000502:	7fbc      	ldrb	r4, [r7, #30]
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	4618      	mov	r0, r3
 800050a:	f003 f8ed 	bl	80036e8 <atoi>
 800050e:	4603      	mov	r3, r0
 8000510:	b29b      	uxth	r3, r3
 8000512:	461a      	mov	r2, r3
 8000514:	4621      	mov	r1, r4
 8000516:	4628      	mov	r0, r5
 8000518:	f000 f922 	bl	8000760 <send_set_step_dir_PWM_X_axis>
				   {
 800051c:	e079      	b.n	8000612 <HAL_UART_RxCpltCallback+0x24e>



				    }
				    else if( Rx_Buffer[1] == 'S' && Rx_Buffer[2] == 'T' && Rx_Buffer[3] == 'P' )//STOP
 800051e:	4b43      	ldr	r3, [pc, #268]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000520:	785b      	ldrb	r3, [r3, #1]
 8000522:	2b53      	cmp	r3, #83	; 0x53
 8000524:	d114      	bne.n	8000550 <HAL_UART_RxCpltCallback+0x18c>
 8000526:	4b41      	ldr	r3, [pc, #260]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000528:	789b      	ldrb	r3, [r3, #2]
 800052a:	2b54      	cmp	r3, #84	; 0x54
 800052c:	d110      	bne.n	8000550 <HAL_UART_RxCpltCallback+0x18c>
 800052e:	4b3f      	ldr	r3, [pc, #252]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000530:	78db      	ldrb	r3, [r3, #3]
 8000532:	2b50      	cmp	r3, #80	; 0x50
 8000534:	d10c      	bne.n	8000550 <HAL_UART_RxCpltCallback+0x18c>
				    {
				    	  printf("STOP MOTOR\n" );
 8000536:	4847      	ldr	r0, [pc, #284]	; (8000654 <HAL_UART_RxCpltCallback+0x290>)
 8000538:	f003 f992 	bl	8003860 <puts>
				    	  ENABLE_M(deactive);//0 ENABLE, 1 DISABLE
 800053c:	2200      	movs	r2, #0
 800053e:	2140      	movs	r1, #64	; 0x40
 8000540:	4845      	ldr	r0, [pc, #276]	; (8000658 <HAL_UART_RxCpltCallback+0x294>)
 8000542:	f001 f844 	bl	80015ce <HAL_GPIO_WritePin>
				    	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);//stop pulse ch X axis
 8000546:	2104      	movs	r1, #4
 8000548:	4844      	ldr	r0, [pc, #272]	; (800065c <HAL_UART_RxCpltCallback+0x298>)
 800054a:	f001 fd59 	bl	8002000 <HAL_TIM_PWM_Stop>
 800054e:	e060      	b.n	8000612 <HAL_UART_RxCpltCallback+0x24e>

				    }
				    else if( Rx_Buffer[1] == 'R' && Rx_Buffer[2] == 'E' && Rx_Buffer[3] == 'S' )//STOP
 8000550:	4b36      	ldr	r3, [pc, #216]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000552:	785b      	ldrb	r3, [r3, #1]
 8000554:	2b52      	cmp	r3, #82	; 0x52
 8000556:	d11a      	bne.n	800058e <HAL_UART_RxCpltCallback+0x1ca>
 8000558:	4b34      	ldr	r3, [pc, #208]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 800055a:	789b      	ldrb	r3, [r3, #2]
 800055c:	2b45      	cmp	r3, #69	; 0x45
 800055e:	d116      	bne.n	800058e <HAL_UART_RxCpltCallback+0x1ca>
 8000560:	4b32      	ldr	r3, [pc, #200]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000562:	78db      	ldrb	r3, [r3, #3]
 8000564:	2b53      	cmp	r3, #83	; 0x53
 8000566:	d112      	bne.n	800058e <HAL_UART_RxCpltCallback+0x1ca>
					{
						  printf("HALF / FULL\n" );
 8000568:	483d      	ldr	r0, [pc, #244]	; (8000660 <HAL_UART_RxCpltCallback+0x29c>)
 800056a:	f003 f979 	bl	8003860 <puts>
						  SET_HALF_FULL_PIN(  (Rx_Buffer[4]-48)   );
 800056e:	4b2f      	ldr	r3, [pc, #188]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	2b30      	cmp	r3, #48	; 0x30
 8000574:	d005      	beq.n	8000582 <HAL_UART_RxCpltCallback+0x1be>
 8000576:	2201      	movs	r2, #1
 8000578:	2108      	movs	r1, #8
 800057a:	4837      	ldr	r0, [pc, #220]	; (8000658 <HAL_UART_RxCpltCallback+0x294>)
 800057c:	f001 f827 	bl	80015ce <HAL_GPIO_WritePin>
 8000580:	e047      	b.n	8000612 <HAL_UART_RxCpltCallback+0x24e>
 8000582:	2200      	movs	r2, #0
 8000584:	2108      	movs	r1, #8
 8000586:	4834      	ldr	r0, [pc, #208]	; (8000658 <HAL_UART_RxCpltCallback+0x294>)
 8000588:	f001 f821 	bl	80015ce <HAL_GPIO_WritePin>
 800058c:	e041      	b.n	8000612 <HAL_UART_RxCpltCallback+0x24e>

					}
				    else if( Rx_Buffer[1] == 'C' && Rx_Buffer[2] == 'T' && Rx_Buffer[3] == 'R'  && Rx_Buffer[4] == 'L')//SLEEP
 800058e:	4b27      	ldr	r3, [pc, #156]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000590:	785b      	ldrb	r3, [r3, #1]
 8000592:	2b43      	cmp	r3, #67	; 0x43
 8000594:	d11b      	bne.n	80005ce <HAL_UART_RxCpltCallback+0x20a>
 8000596:	4b25      	ldr	r3, [pc, #148]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000598:	789b      	ldrb	r3, [r3, #2]
 800059a:	2b54      	cmp	r3, #84	; 0x54
 800059c:	d117      	bne.n	80005ce <HAL_UART_RxCpltCallback+0x20a>
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80005a0:	78db      	ldrb	r3, [r3, #3]
 80005a2:	2b52      	cmp	r3, #82	; 0x52
 80005a4:	d113      	bne.n	80005ce <HAL_UART_RxCpltCallback+0x20a>
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80005a8:	791b      	ldrb	r3, [r3, #4]
 80005aa:	2b4c      	cmp	r3, #76	; 0x4c
 80005ac:	d10f      	bne.n	80005ce <HAL_UART_RxCpltCallback+0x20a>
					{
				    	CONTROL_PIN(  (Rx_Buffer[5]-48)  );
 80005ae:	4b1f      	ldr	r3, [pc, #124]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	2b30      	cmp	r3, #48	; 0x30
 80005b4:	d005      	beq.n	80005c2 <HAL_UART_RxCpltCallback+0x1fe>
 80005b6:	2201      	movs	r2, #1
 80005b8:	2120      	movs	r1, #32
 80005ba:	4827      	ldr	r0, [pc, #156]	; (8000658 <HAL_UART_RxCpltCallback+0x294>)
 80005bc:	f001 f807 	bl	80015ce <HAL_GPIO_WritePin>
 80005c0:	e027      	b.n	8000612 <HAL_UART_RxCpltCallback+0x24e>
 80005c2:	2200      	movs	r2, #0
 80005c4:	2120      	movs	r1, #32
 80005c6:	4824      	ldr	r0, [pc, #144]	; (8000658 <HAL_UART_RxCpltCallback+0x294>)
 80005c8:	f001 f801 	bl	80015ce <HAL_GPIO_WritePin>
 80005cc:	e021      	b.n	8000612 <HAL_UART_RxCpltCallback+0x24e>
					}
				    else if( Rx_Buffer[1] == 'P' && Rx_Buffer[2] == 'O' && Rx_Buffer[3] == 'S' )
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	2b50      	cmp	r3, #80	; 0x50
 80005d4:	d10e      	bne.n	80005f4 <HAL_UART_RxCpltCallback+0x230>
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	2b4f      	cmp	r3, #79	; 0x4f
 80005dc:	d10a      	bne.n	80005f4 <HAL_UART_RxCpltCallback+0x230>
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80005e0:	78db      	ldrb	r3, [r3, #3]
 80005e2:	2b53      	cmp	r3, #83	; 0x53
 80005e4:	d106      	bne.n	80005f4 <HAL_UART_RxCpltCallback+0x230>
					{


				    		printf("position motor 1=<%d>\n",global_poz_x_axis);
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <HAL_UART_RxCpltCallback+0x2a0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4619      	mov	r1, r3
 80005ec:	481e      	ldr	r0, [pc, #120]	; (8000668 <HAL_UART_RxCpltCallback+0x2a4>)
 80005ee:	f003 f8b1 	bl	8003754 <iprintf>
 80005f2:	e00e      	b.n	8000612 <HAL_UART_RxCpltCallback+0x24e>


					}
				    else if( Rx_Buffer[1] == 'Z' && Rx_Buffer[2] == 'R' && Rx_Buffer[3] == 'O' )//SLEEP
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80005f6:	785b      	ldrb	r3, [r3, #1]
 80005f8:	2b5a      	cmp	r3, #90	; 0x5a
 80005fa:	d10a      	bne.n	8000612 <HAL_UART_RxCpltCallback+0x24e>
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 80005fe:	789b      	ldrb	r3, [r3, #2]
 8000600:	2b52      	cmp	r3, #82	; 0x52
 8000602:	d106      	bne.n	8000612 <HAL_UART_RxCpltCallback+0x24e>
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_UART_RxCpltCallback+0x268>)
 8000606:	78db      	ldrb	r3, [r3, #3]
 8000608:	2b4f      	cmp	r3, #79	; 0x4f
 800060a:	d102      	bne.n	8000612 <HAL_UART_RxCpltCallback+0x24e>
					{


							 global_poz_x_axis=0;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_UART_RxCpltCallback+0x2a0>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]

					}


				}
				HAL_UART_Receive_IT(&huart1,(uint8_t *)Rx_data,1);
 8000612:	2201      	movs	r2, #1
 8000614:	4906      	ldr	r1, [pc, #24]	; (8000630 <HAL_UART_RxCpltCallback+0x26c>)
 8000616:	4815      	ldr	r0, [pc, #84]	; (800066c <HAL_UART_RxCpltCallback+0x2a8>)
 8000618:	f002 fcdf 	bl	8002fda <HAL_UART_Receive_IT>

		}

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bdb0      	pop	{r4, r5, r7, pc}
 8000624:	40013800 	.word	0x40013800
 8000628:	200000a2 	.word	0x200000a2
 800062c:	200000a4 	.word	0x200000a4
 8000630:	200000a0 	.word	0x200000a0
 8000634:	20000108 	.word	0x20000108
 8000638:	20000004 	.word	0x20000004
 800063c:	20000005 	.word	0x20000005
 8000640:	20000006 	.word	0x20000006
 8000644:	20000007 	.word	0x20000007
 8000648:	080048d8 	.word	0x080048d8
 800064c:	080048e4 	.word	0x080048e4
 8000650:	0800488c 	.word	0x0800488c
 8000654:	080048a8 	.word	0x080048a8
 8000658:	40010c00 	.word	0x40010c00
 800065c:	20000110 	.word	0x20000110
 8000660:	080048b4 	.word	0x080048b4
 8000664:	20000094 	.word	0x20000094
 8000668:	080048c0 	.word	0x080048c0
 800066c:	20000158 	.word	0x20000158

08000670 <send_set_step_dir_DLY_x_axis>:


//############################ delay mode ##################################################################################

void send_set_step_dir_DLY_x_axis(uint32_t step , int dir,uint16_t speed)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	4613      	mov	r3, r2
 800067c:	80fb      	strh	r3, [r7, #6]

	if(dir==1)
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d105      	bne.n	8000690 <send_set_step_dir_DLY_x_axis+0x20>
	{
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		SET_DIR(1);
 8000684:	2201      	movs	r2, #1
 8000686:	2110      	movs	r1, #16
 8000688:	4810      	ldr	r0, [pc, #64]	; (80006cc <send_set_step_dir_DLY_x_axis+0x5c>)
 800068a:	f000 ffa0 	bl	80015ce <HAL_GPIO_WritePin>
 800068e:	e004      	b.n	800069a <send_set_step_dir_DLY_x_axis+0x2a>
	}
	else
	{
		SET_DIR(0);
 8000690:	2200      	movs	r2, #0
 8000692:	2110      	movs	r1, #16
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <send_set_step_dir_DLY_x_axis+0x5c>)
 8000696:	f000 ff9a 	bl	80015ce <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
	}

	for(uint32_t i=0 ; i < step ; i++)
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	e00b      	b.n	80006b8 <send_set_step_dir_DLY_x_axis+0x48>
	{
		HAL_GPIO_TogglePin( TIM4_CH2_OUTPUT_STEP_GPIO_Port , TIM4_CH2_OUTPUT_STEP_Pin);
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <send_set_step_dir_DLY_x_axis+0x5c>)
 80006a4:	f000 ffab 	bl	80015fe <HAL_GPIO_TogglePin>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
		DWT_Delay_us( speed+50 );//200
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	3332      	adds	r3, #50	; 0x32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fdb9 	bl	8000224 <DWT_Delay_us>
	for(uint32_t i=0 ; i < step ; i++)
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	3301      	adds	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	697a      	ldr	r2, [r7, #20]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d3ef      	bcc.n	80006a0 <send_set_step_dir_DLY_x_axis+0x30>
	}

}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40010c00 	.word	0x40010c00

080006d0 <HAL_TIM_PWM_PulseFinishedCallback>:



//########################## pwm mode ####################################################################################
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]


    if(htim->Instance==TIM4)//interrupt with every pulse for y ch--------------------------------------------------------------------
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a1a      	ldr	r2, [pc, #104]	; (8000748 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d12d      	bne.n	800073e <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
	{

    	 LED_TGL;
 80006e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e6:	4819      	ldr	r0, [pc, #100]	; (800074c <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80006e8:	f000 ff89 	bl	80015fe <HAL_GPIO_TogglePin>

				    if(direction_x_axis )
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d012      	beq.n	800071a <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
					{
				    	step_x_axis--;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3b01      	subs	r3, #1
 80006fa:	4a16      	ldr	r2, [pc, #88]	; (8000754 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 80006fc:	6013      	str	r3, [r2, #0]
				    	global_poz_x_axis--;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3b01      	subs	r3, #1
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000706:	6013      	str	r3, [r2, #0]
				    	if( step_x_axis<=0)//50000 --->>>  step_x_axis = s_value_x_p
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	dc16      	bgt.n	800073e <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
						{
						   HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);//stop pulse ch y axis
 8000710:	2104      	movs	r1, #4
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000714:	f001 fc74 	bl	8002000 <HAL_TIM_PWM_Stop>





}
 8000718:	e011      	b.n	800073e <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
				    	step_x_axis++;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000722:	6013      	str	r3, [r2, #0]
				    	global_poz_x_axis++;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800072c:	6013      	str	r3, [r2, #0]
				    	if( step_x_axis>=0)//50000 --->>>  step_x_axis = s_value_x_p
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	db03      	blt.n	800073e <HAL_TIM_PWM_PulseFinishedCallback+0x6e>
						   HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);//stop pulse ch y axis
 8000736:	2104      	movs	r1, #4
 8000738:	4808      	ldr	r0, [pc, #32]	; (800075c <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 800073a:	f001 fc61 	bl	8002000 <HAL_TIM_PWM_Stop>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40000800 	.word	0x40000800
 800074c:	40010c00 	.word	0x40010c00
 8000750:	2000009c 	.word	0x2000009c
 8000754:	20000098 	.word	0x20000098
 8000758:	20000094 	.word	0x20000094
 800075c:	20000110 	.word	0x20000110

08000760 <send_set_step_dir_PWM_X_axis>:
//##########################################################################################
//##########################################################################################


void send_set_step_dir_PWM_X_axis(uint32_t step , int dir , uint16_t speed)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	4613      	mov	r3, r2
 800076c:	80fb      	strh	r3, [r7, #6]

	ENABLE_M(active);//0 ENABLE, 1 DISABLE
 800076e:	2201      	movs	r2, #1
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	4821      	ldr	r0, [pc, #132]	; (80007f8 <send_set_step_dir_PWM_X_axis+0x98>)
 8000774:	f000 ff2b 	bl	80015ce <HAL_GPIO_WritePin>

	if(dir==1)
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d10b      	bne.n	8000796 <send_set_step_dir_PWM_X_axis+0x36>
	{
		 direction_x_axis = true;
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <send_set_step_dir_PWM_X_axis+0x9c>)
 8000780:	2201      	movs	r2, #1
 8000782:	701a      	strb	r2, [r3, #0]
		 SET_DIR(1);
 8000784:	2201      	movs	r2, #1
 8000786:	2110      	movs	r1, #16
 8000788:	481b      	ldr	r0, [pc, #108]	; (80007f8 <send_set_step_dir_PWM_X_axis+0x98>)
 800078a:	f000 ff20 	bl	80015ce <HAL_GPIO_WritePin>
		 step_x_axis = step;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <send_set_step_dir_PWM_X_axis+0xa0>)
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	e00c      	b.n	80007b0 <send_set_step_dir_PWM_X_axis+0x50>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
	}
	else
	{
		step_x_axis = step *(-1);
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	425b      	negs	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <send_set_step_dir_PWM_X_axis+0xa0>)
 800079e:	601a      	str	r2, [r3, #0]
		direction_x_axis=false;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <send_set_step_dir_PWM_X_axis+0x9c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
		SET_DIR(0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2110      	movs	r1, #16
 80007aa:	4813      	ldr	r0, [pc, #76]	; (80007f8 <send_set_step_dir_PWM_X_axis+0x98>)
 80007ac:	f000 ff0f 	bl	80015ce <HAL_GPIO_WritePin>


	//step_x_axis = step;


	htim4.Instance = TIM4;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <send_set_step_dir_PWM_X_axis+0xa4>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <send_set_step_dir_PWM_X_axis+0xa8>)
 80007b4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = speed-1 ; // 3-1
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <send_set_step_dir_PWM_X_axis+0xa4>)
 80007be:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <send_set_step_dir_PWM_X_axis+0xa4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100;// speed-1
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <send_set_step_dir_PWM_X_axis+0xa4>)
 80007c8:	2264      	movs	r2, #100	; 0x64
 80007ca:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <send_set_step_dir_PWM_X_axis+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <send_set_step_dir_PWM_X_axis+0xa4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4) ;
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <send_set_step_dir_PWM_X_axis+0xa4>)
 80007da:	f001 fb69 	bl	8001eb0 <HAL_TIM_Base_Init>

	 HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 80007de:	2104      	movs	r1, #4
 80007e0:	4808      	ldr	r0, [pc, #32]	; (8000804 <send_set_step_dir_PWM_X_axis+0xa4>)
 80007e2:	f001 fc71 	bl	80020c8 <HAL_TIM_PWM_Start_IT>
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2,50);// 40
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <send_set_step_dir_PWM_X_axis+0xa4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2232      	movs	r2, #50	; 0x32
 80007ec:	639a      	str	r2, [r3, #56]	; 0x38




}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40010c00 	.word	0x40010c00
 80007fc:	2000009c 	.word	0x2000009c
 8000800:	20000098 	.word	0x20000098
 8000804:	20000110 	.word	0x20000110
 8000808:	40000800 	.word	0x40000800

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000812:	f000 fb37 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000816:	f000 f85f 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f7ff fc97 	bl	800014c <MX_GPIO_Init>
  MX_TIM4_Init();
 800081e:	f000 f9bf 	bl	8000ba0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000822:	f000 fa8b 	bl	8000d3c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */




  HAL_UART_Receive_IT(&huart1,(uint8_t *)Rx_data,1);
 8000826:	2201      	movs	r2, #1
 8000828:	4926      	ldr	r1, [pc, #152]	; (80008c4 <main+0xb8>)
 800082a:	4827      	ldr	r0, [pc, #156]	; (80008c8 <main+0xbc>)
 800082c:	f002 fbd5 	bl	8002fda <HAL_UART_Receive_IT>


  if(!pwm_mode)
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <main+0xc0>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	f083 0301 	eor.w	r3, r3, #1
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d012      	beq.n	8000864 <main+0x58>
  {
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = TIM4_CH2_OUTPUT_STEP_Pin;
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(TIM4_CH2_OUTPUT_STEP_GPIO_Port, &GPIO_InitStruct);
 800085a:	463b      	mov	r3, r7
 800085c:	4619      	mov	r1, r3
 800085e:	481c      	ldr	r0, [pc, #112]	; (80008d0 <main+0xc4>)
 8000860:	f000 fd1a 	bl	8001298 <HAL_GPIO_Init>





  DWT_Delay_Init();
 8000864:	f002 ff10 	bl	8003688 <DWT_Delay_Init>




  ENABLE_M(active);//0 ENABLE, 1 DISABLE
 8000868:	2201      	movs	r2, #1
 800086a:	2140      	movs	r1, #64	; 0x40
 800086c:	4818      	ldr	r0, [pc, #96]	; (80008d0 <main+0xc4>)
 800086e:	f000 feae 	bl	80015ce <HAL_GPIO_WritePin>
  CONTROL_PIN(active);
 8000872:	2201      	movs	r2, #1
 8000874:	2120      	movs	r1, #32
 8000876:	4816      	ldr	r0, [pc, #88]	; (80008d0 <main+0xc4>)
 8000878:	f000 fea9 	bl	80015ce <HAL_GPIO_WritePin>



 printf("============system started============\n");
 800087c:	4815      	ldr	r0, [pc, #84]	; (80008d4 <main+0xc8>)
 800087e:	f002 ffef 	bl	8003860 <puts>


 	 	if(!READ_SW5)
 8000882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000886:	4812      	ldr	r0, [pc, #72]	; (80008d0 <main+0xc4>)
 8000888:	f000 fe8a 	bl	80015a0 <HAL_GPIO_ReadPin>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d105      	bne.n	800089e <main+0x92>
 		{
 			 SET_HALF_FULL_PIN(1);
 8000892:	2201      	movs	r2, #1
 8000894:	2108      	movs	r1, #8
 8000896:	480e      	ldr	r0, [pc, #56]	; (80008d0 <main+0xc4>)
 8000898:	f000 fe99 	bl	80015ce <HAL_GPIO_WritePin>
 800089c:	e004      	b.n	80008a8 <main+0x9c>
 		}
 		else
 		{
 			 SET_HALF_FULL_PIN(0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2108      	movs	r1, #8
 80008a2:	480b      	ldr	r0, [pc, #44]	; (80008d0 <main+0xc4>)
 80008a4:	f000 fe93 	bl	80015ce <HAL_GPIO_WritePin>
 		}



 read_sw_switch();
 80008a8:	f7ff fcf4 	bl	8000294 <read_sw_switch>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  read_sw_switch();
 80008ac:	f7ff fcf2 	bl	8000294 <read_sw_switch>

	 // printf("============\n");

	  LED_TGL;
 80008b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <main+0xc4>)
 80008b6:	f000 fea2 	bl	80015fe <HAL_GPIO_TogglePin>


	  HAL_Delay(700);
 80008ba:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80008be:	f000 fb43 	bl	8000f48 <HAL_Delay>
	  read_sw_switch();
 80008c2:	e7f3      	b.n	80008ac <main+0xa0>
 80008c4:	200000a0 	.word	0x200000a0
 80008c8:	20000158 	.word	0x20000158
 80008cc:	20000000 	.word	0x20000000
 80008d0:	40010c00 	.word	0x40010c00
 80008d4:	080048ec 	.word	0x080048ec

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b090      	sub	sp, #64	; 0x40
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	2228      	movs	r2, #40	; 0x28
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 ff2c 	bl	8003744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000908:	2301      	movs	r3, #1
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	2302      	movs	r3, #2
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000916:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0318 	add.w	r3, r7, #24
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fe85 	bl	8001630 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800092c:	f000 f81b 	bl	8000966 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2302      	movs	r3, #2
 8000936:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2102      	movs	r1, #2
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f8f2 	bl	8001b34 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000956:	f000 f806 	bl	8000966 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800095a:	f001 f9d5 	bl	8001d08 <HAL_RCC_EnableCSS>
}
 800095e:	bf00      	nop
 8000960:	3740      	adds	r7, #64	; 0x40
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_MspInit+0x5c>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <HAL_MspInit+0x5c>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6193      	str	r3, [r2, #24]
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_MspInit+0x5c>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <HAL_MspInit+0x5c>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_MspInit+0x5c>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <HAL_MspInit+0x5c>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_MspInit+0x60>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_MspInit+0x60>)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010000 	.word	0x40010000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80009dc:	f001 fa30 	bl	8001e40 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x8>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a22:	f000 fa75 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <TIM4_IRQHandler+0x10>)
 8000a32:	f001 fc31 	bl	8002298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000110 	.word	0x20000110

08000a40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <USART1_IRQHandler+0x10>)
 8000a46:	f002 fb1d 	bl	8003084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000158 	.word	0x20000158

08000a54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e00a      	b.n	8000a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a66:	f3af 8000 	nop.w
 8000a6a:	4601      	mov	r1, r0
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60ba      	str	r2, [r7, #8]
 8000a72:	b2ca      	uxtb	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbf0      	blt.n	8000a66 <_read+0x12>
	}

return len;
 8000a84:	687b      	ldr	r3, [r7, #4]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e009      	b.n	8000ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fbe1 	bl	8000270 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbf1      	blt.n	8000aa0 <_write+0x12>
	}
	return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_close>:

int _close(int file)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aec:	605a      	str	r2, [r3, #4]
	return 0;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <_isatty>:

int _isatty(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
	return 1;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b085      	sub	sp, #20
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
	return 0;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
	...

08000b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <_sbrk+0x5c>)
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <_sbrk+0x60>)
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <_sbrk+0x64>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <_sbrk+0x64>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <_sbrk+0x68>)
 8000b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d207      	bcs.n	8000b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b58:	f002 fdca 	bl	80036f0 <__errno>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	220c      	movs	r2, #12
 8000b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	e009      	b.n	8000b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <_sbrk+0x64>)
 8000b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20005000 	.word	0x20005000
 8000b88:	00000400 	.word	0x00000400
 8000b8c:	2000010c 	.word	0x2000010c
 8000b90:	200001b0 	.word	0x200001b0

08000b94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	f107 0320 	add.w	r3, r7, #32
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000bd2:	4a2d      	ldr	r2, [pc, #180]	; (8000c88 <MX_TIM4_Init+0xe8>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72;
 8000bd6:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000bd8:	2248      	movs	r2, #72	; 0x48
 8000bda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bf4:	4823      	ldr	r0, [pc, #140]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000bf6:	f001 f95b 	bl	8001eb0 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000c00:	f7ff feb1 	bl	8000966 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481c      	ldr	r0, [pc, #112]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000c12:	f001 fd07 	bl	8002624 <HAL_TIM_ConfigClockSource>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000c1c:	f7ff fea3 	bl	8000966 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c20:	4818      	ldr	r0, [pc, #96]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000c22:	f001 f994 	bl	8001f4e <HAL_TIM_PWM_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000c2c:	f7ff fe9b 	bl	8000966 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c38:	f107 0320 	add.w	r3, r7, #32
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000c40:	f002 f87c 	bl	8002d3c <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000c4a:	f7ff fe8c 	bl	8000966 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4e:	2360      	movs	r3, #96	; 0x60
 8000c50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2204      	movs	r2, #4
 8000c62:	4619      	mov	r1, r3
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000c66:	f001 fc1f 	bl	80024a8 <HAL_TIM_PWM_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000c70:	f7ff fe79 	bl	8000966 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_TIM4_Init+0xe4>)
 8000c76:	f000 f82f 	bl	8000cd8 <HAL_TIM_MspPostInit>

}
 8000c7a:	bf00      	nop
 8000c7c:	3738      	adds	r7, #56	; 0x38
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000110 	.word	0x20000110
 8000c88:	40000800 	.word	0x40000800

08000c8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <HAL_TIM_Base_MspInit+0x44>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d113      	bne.n	8000cc6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_TIM_Base_MspInit+0x48>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <HAL_TIM_Base_MspInit+0x48>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_TIM_Base_MspInit+0x48>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	201e      	movs	r0, #30
 8000cbc:	f000 fa3f 	bl	800113e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cc0:	201e      	movs	r0, #30
 8000cc2:	f000 fa58 	bl	8001176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40000800 	.word	0x40000800
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <HAL_TIM_MspPostInit+0x58>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d117      	bne.n	8000d28 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_TIM_MspPostInit+0x5c>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <HAL_TIM_MspPostInit+0x5c>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_TIM_MspPostInit+0x5c>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = TIM4_CH2_OUTPUT_STEP_Pin;
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM4_CH2_OUTPUT_STEP_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_TIM_MspPostInit+0x60>)
 8000d24:	f000 fab8 	bl	8001298 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40000800 	.word	0x40000800
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40010c00 	.word	0x40010c00

08000d3c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <MX_USART1_UART_Init+0x50>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_USART1_UART_Init+0x4c>)
 8000d74:	f002 f852 	bl	8002e1c <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d7e:	f7ff fdf2 	bl	8000966 <Error_Handler>
  }

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000158 	.word	0x20000158
 8000d8c:	40013800 	.word	0x40013800

08000d90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <HAL_UART_MspInit+0x9c>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d139      	bne.n	8000e24 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <HAL_UART_MspInit+0xa0>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <HAL_UART_MspInit+0xa0>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_UART_MspInit+0xa0>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_UART_MspInit+0xa0>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_UART_MspInit+0xa0>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_UART_MspInit+0xa0>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	4619      	mov	r1, r3
 8000df4:	480f      	ldr	r0, [pc, #60]	; (8000e34 <HAL_UART_MspInit+0xa4>)
 8000df6:	f000 fa4f 	bl	8001298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <HAL_UART_MspInit+0xa4>)
 8000e10:	f000 fa42 	bl	8001298 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	2025      	movs	r0, #37	; 0x25
 8000e1a:	f000 f990 	bl	800113e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e1e:	2025      	movs	r0, #37	; 0x25
 8000e20:	f000 f9a9 	bl	8001176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40013800 	.word	0x40013800
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010800 	.word	0x40010800

08000e38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e3a:	e003      	b.n	8000e44 <LoopCopyDataInit>

08000e3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e42:	3104      	adds	r1, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e44:	480a      	ldr	r0, [pc, #40]	; (8000e70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e4c:	d3f6      	bcc.n	8000e3c <CopyDataInit>
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e50:	e002      	b.n	8000e58 <LoopFillZerobss>

08000e52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e54:	f842 3b04 	str.w	r3, [r2], #4

08000e58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e5c:	d3f9      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e5e:	f7ff fe99 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f002 fc4b 	bl	80036fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff fcd1 	bl	800080c <main>
  bx lr
 8000e6a:	4770      	bx	lr
  ldr r3, =_sidata
 8000e6c:	08004ae0 	.word	0x08004ae0
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e74:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000e78:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000e7c:	200001ac 	.word	0x200001ac

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x28>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f947 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fd68 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f95f 	bl	8001192 <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f927 	bl	800113e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	2000000c 	.word	0x2000000c

08000f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x1c>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_IncTick+0x20>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <HAL_IncTick+0x20>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000010 	.word	0x20000010
 8000f30:	20000198 	.word	0x20000198

08000f34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b02      	ldr	r3, [pc, #8]	; (8000f44 <HAL_GetTick+0x10>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	20000198 	.word	0x20000198

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff fff0 	bl	8000f34 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_Delay+0x44>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffe0 	bl	8000f34 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000010 	.word	0x20000010

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4906      	ldr	r1, [pc, #24]	; (8001028 <__NVIC_EnableIRQ+0x34>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f4:	d301      	bcc.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00f      	b.n	800111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <SysTick_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	210f      	movs	r1, #15
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f7ff ff90 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SysTick_Config+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SysTick_Config+0x40>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff2d 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff42 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff90 	bl	8001080 <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5f 	bl	800102c <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff35 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffa2 	bl	80010e4 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d005      	beq.n	80011ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2204      	movs	r2, #4
 80011c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e051      	b.n	8001272 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 020e 	bic.w	r2, r2, #14
 80011dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a22      	ldr	r2, [pc, #136]	; (800127c <HAL_DMA_Abort_IT+0xd0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d029      	beq.n	800124c <HAL_DMA_Abort_IT+0xa0>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a20      	ldr	r2, [pc, #128]	; (8001280 <HAL_DMA_Abort_IT+0xd4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d022      	beq.n	8001248 <HAL_DMA_Abort_IT+0x9c>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a1f      	ldr	r2, [pc, #124]	; (8001284 <HAL_DMA_Abort_IT+0xd8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d01a      	beq.n	8001242 <HAL_DMA_Abort_IT+0x96>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_DMA_Abort_IT+0xdc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d012      	beq.n	800123c <HAL_DMA_Abort_IT+0x90>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1c      	ldr	r2, [pc, #112]	; (800128c <HAL_DMA_Abort_IT+0xe0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d00a      	beq.n	8001236 <HAL_DMA_Abort_IT+0x8a>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a1a      	ldr	r2, [pc, #104]	; (8001290 <HAL_DMA_Abort_IT+0xe4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d102      	bne.n	8001230 <HAL_DMA_Abort_IT+0x84>
 800122a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800122e:	e00e      	b.n	800124e <HAL_DMA_Abort_IT+0xa2>
 8001230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001234:	e00b      	b.n	800124e <HAL_DMA_Abort_IT+0xa2>
 8001236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123a:	e008      	b.n	800124e <HAL_DMA_Abort_IT+0xa2>
 800123c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001240:	e005      	b.n	800124e <HAL_DMA_Abort_IT+0xa2>
 8001242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001246:	e002      	b.n	800124e <HAL_DMA_Abort_IT+0xa2>
 8001248:	2310      	movs	r3, #16
 800124a:	e000      	b.n	800124e <HAL_DMA_Abort_IT+0xa2>
 800124c:	2301      	movs	r3, #1
 800124e:	4a11      	ldr	r2, [pc, #68]	; (8001294 <HAL_DMA_Abort_IT+0xe8>)
 8001250:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	4798      	blx	r3
    } 
  }
  return status;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40020008 	.word	0x40020008
 8001280:	4002001c 	.word	0x4002001c
 8001284:	40020030 	.word	0x40020030
 8001288:	40020044 	.word	0x40020044
 800128c:	40020058 	.word	0x40020058
 8001290:	4002006c 	.word	0x4002006c
 8001294:	40020000 	.word	0x40020000

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b08b      	sub	sp, #44	; 0x2c
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012aa:	e169      	b.n	8001580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012ac:	2201      	movs	r2, #1
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f040 8158 	bne.w	800157a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4a9a      	ldr	r2, [pc, #616]	; (8001538 <HAL_GPIO_Init+0x2a0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d05e      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
 80012d4:	4a98      	ldr	r2, [pc, #608]	; (8001538 <HAL_GPIO_Init+0x2a0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d875      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 80012da:	4a98      	ldr	r2, [pc, #608]	; (800153c <HAL_GPIO_Init+0x2a4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d058      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
 80012e0:	4a96      	ldr	r2, [pc, #600]	; (800153c <HAL_GPIO_Init+0x2a4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d86f      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 80012e6:	4a96      	ldr	r2, [pc, #600]	; (8001540 <HAL_GPIO_Init+0x2a8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d052      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
 80012ec:	4a94      	ldr	r2, [pc, #592]	; (8001540 <HAL_GPIO_Init+0x2a8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d869      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 80012f2:	4a94      	ldr	r2, [pc, #592]	; (8001544 <HAL_GPIO_Init+0x2ac>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d04c      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
 80012f8:	4a92      	ldr	r2, [pc, #584]	; (8001544 <HAL_GPIO_Init+0x2ac>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d863      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 80012fe:	4a92      	ldr	r2, [pc, #584]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d046      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
 8001304:	4a90      	ldr	r2, [pc, #576]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d85d      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 800130a:	2b12      	cmp	r3, #18
 800130c:	d82a      	bhi.n	8001364 <HAL_GPIO_Init+0xcc>
 800130e:	2b12      	cmp	r3, #18
 8001310:	d859      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <HAL_GPIO_Init+0x80>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	08001393 	.word	0x08001393
 800131c:	0800136d 	.word	0x0800136d
 8001320:	0800137f 	.word	0x0800137f
 8001324:	080013c1 	.word	0x080013c1
 8001328:	080013c7 	.word	0x080013c7
 800132c:	080013c7 	.word	0x080013c7
 8001330:	080013c7 	.word	0x080013c7
 8001334:	080013c7 	.word	0x080013c7
 8001338:	080013c7 	.word	0x080013c7
 800133c:	080013c7 	.word	0x080013c7
 8001340:	080013c7 	.word	0x080013c7
 8001344:	080013c7 	.word	0x080013c7
 8001348:	080013c7 	.word	0x080013c7
 800134c:	080013c7 	.word	0x080013c7
 8001350:	080013c7 	.word	0x080013c7
 8001354:	080013c7 	.word	0x080013c7
 8001358:	080013c7 	.word	0x080013c7
 800135c:	08001375 	.word	0x08001375
 8001360:	08001389 	.word	0x08001389
 8001364:	4a79      	ldr	r2, [pc, #484]	; (800154c <HAL_GPIO_Init+0x2b4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800136a:	e02c      	b.n	80013c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	623b      	str	r3, [r7, #32]
          break;
 8001372:	e029      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	3304      	adds	r3, #4
 800137a:	623b      	str	r3, [r7, #32]
          break;
 800137c:	e024      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	3308      	adds	r3, #8
 8001384:	623b      	str	r3, [r7, #32]
          break;
 8001386:	e01f      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	330c      	adds	r3, #12
 800138e:	623b      	str	r3, [r7, #32]
          break;
 8001390:	e01a      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d102      	bne.n	80013a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800139a:	2304      	movs	r3, #4
 800139c:	623b      	str	r3, [r7, #32]
          break;
 800139e:	e013      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d105      	bne.n	80013b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a8:	2308      	movs	r3, #8
 80013aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	611a      	str	r2, [r3, #16]
          break;
 80013b2:	e009      	b.n	80013c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b4:	2308      	movs	r3, #8
 80013b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	615a      	str	r2, [r3, #20]
          break;
 80013be:	e003      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	e000      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          break;
 80013c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2bff      	cmp	r3, #255	; 0xff
 80013cc:	d801      	bhi.n	80013d2 <HAL_GPIO_Init+0x13a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	e001      	b.n	80013d6 <HAL_GPIO_Init+0x13e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3304      	adds	r3, #4
 80013d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2bff      	cmp	r3, #255	; 0xff
 80013dc:	d802      	bhi.n	80013e4 <HAL_GPIO_Init+0x14c>
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	e002      	b.n	80013ea <HAL_GPIO_Init+0x152>
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	3b08      	subs	r3, #8
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	210f      	movs	r1, #15
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	6a39      	ldr	r1, [r7, #32]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	431a      	orrs	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80b1 	beq.w	800157a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001418:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <HAL_GPIO_Init+0x2b8>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a4c      	ldr	r2, [pc, #304]	; (8001550 <HAL_GPIO_Init+0x2b8>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <HAL_GPIO_Init+0x2b8>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001430:	4a48      	ldr	r2, [pc, #288]	; (8001554 <HAL_GPIO_Init+0x2bc>)
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a40      	ldr	r2, [pc, #256]	; (8001558 <HAL_GPIO_Init+0x2c0>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d013      	beq.n	8001484 <HAL_GPIO_Init+0x1ec>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3f      	ldr	r2, [pc, #252]	; (800155c <HAL_GPIO_Init+0x2c4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00d      	beq.n	8001480 <HAL_GPIO_Init+0x1e8>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a3e      	ldr	r2, [pc, #248]	; (8001560 <HAL_GPIO_Init+0x2c8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x1e4>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a3d      	ldr	r2, [pc, #244]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_GPIO_Init+0x1e0>
 8001474:	2303      	movs	r3, #3
 8001476:	e006      	b.n	8001486 <HAL_GPIO_Init+0x1ee>
 8001478:	2304      	movs	r3, #4
 800147a:	e004      	b.n	8001486 <HAL_GPIO_Init+0x1ee>
 800147c:	2302      	movs	r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x1ee>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_GPIO_Init+0x1ee>
 8001484:	2300      	movs	r3, #0
 8001486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001488:	f002 0203 	and.w	r2, r2, #3
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	4093      	lsls	r3, r2
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001496:	492f      	ldr	r1, [pc, #188]	; (8001554 <HAL_GPIO_Init+0x2bc>)
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	492c      	ldr	r1, [pc, #176]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
 80014bc:	e006      	b.n	80014cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	4928      	ldr	r1, [pc, #160]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d006      	beq.n	80014e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4922      	ldr	r1, [pc, #136]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	491e      	ldr	r1, [pc, #120]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	4918      	ldr	r1, [pc, #96]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]
 800150c:	e006      	b.n	800151c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	43db      	mvns	r3, r3
 8001516:	4914      	ldr	r1, [pc, #80]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 8001518:	4013      	ands	r3, r2
 800151a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d021      	beq.n	800156c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	490e      	ldr	r1, [pc, #56]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	60cb      	str	r3, [r1, #12]
 8001534:	e021      	b.n	800157a <HAL_GPIO_Init+0x2e2>
 8001536:	bf00      	nop
 8001538:	10320000 	.word	0x10320000
 800153c:	10310000 	.word	0x10310000
 8001540:	10220000 	.word	0x10220000
 8001544:	10210000 	.word	0x10210000
 8001548:	10120000 	.word	0x10120000
 800154c:	10110000 	.word	0x10110000
 8001550:	40021000 	.word	0x40021000
 8001554:	40010000 	.word	0x40010000
 8001558:	40010800 	.word	0x40010800
 800155c:	40010c00 	.word	0x40010c00
 8001560:	40011000 	.word	0x40011000
 8001564:	40011400 	.word	0x40011400
 8001568:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_GPIO_Init+0x304>)
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	43db      	mvns	r3, r3
 8001574:	4909      	ldr	r1, [pc, #36]	; (800159c <HAL_GPIO_Init+0x304>)
 8001576:	4013      	ands	r3, r2
 8001578:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	3301      	adds	r3, #1
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	fa22 f303 	lsr.w	r3, r2, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	f47f ae8e 	bne.w	80012ac <HAL_GPIO_Init+0x14>
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	372c      	adds	r7, #44	; 0x2c
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40010400 	.word	0x40010400

080015a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	460b      	mov	r3, r1
 80015d8:	807b      	strh	r3, [r7, #2]
 80015da:	4613      	mov	r3, r2
 80015dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015de:	787b      	ldrb	r3, [r7, #1]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e4:	887a      	ldrh	r2, [r7, #2]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015ea:	e003      	b.n	80015f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	041a      	lsls	r2, r3, #16
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	611a      	str	r2, [r3, #16]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	460b      	mov	r3, r1
 8001608:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001610:	887a      	ldrh	r2, [r7, #2]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	041a      	lsls	r2, r3, #16
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43d9      	mvns	r1, r3
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	400b      	ands	r3, r1
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	611a      	str	r2, [r3, #16]
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e272      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8087 	beq.w	800175e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001650:	4b92      	ldr	r3, [pc, #584]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b04      	cmp	r3, #4
 800165a:	d00c      	beq.n	8001676 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800165c:	4b8f      	ldr	r3, [pc, #572]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d112      	bne.n	800168e <HAL_RCC_OscConfig+0x5e>
 8001668:	4b8c      	ldr	r3, [pc, #560]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001674:	d10b      	bne.n	800168e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001676:	4b89      	ldr	r3, [pc, #548]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d06c      	beq.n	800175c <HAL_RCC_OscConfig+0x12c>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d168      	bne.n	800175c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e24c      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001696:	d106      	bne.n	80016a6 <HAL_RCC_OscConfig+0x76>
 8001698:	4b80      	ldr	r3, [pc, #512]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a7f      	ldr	r2, [pc, #508]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 800169e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e02e      	b.n	8001704 <HAL_RCC_OscConfig+0xd4>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x98>
 80016ae:	4b7b      	ldr	r3, [pc, #492]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a7a      	ldr	r2, [pc, #488]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b78      	ldr	r3, [pc, #480]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a77      	ldr	r2, [pc, #476]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e01d      	b.n	8001704 <HAL_RCC_OscConfig+0xd4>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0xbc>
 80016d2:	4b72      	ldr	r3, [pc, #456]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a71      	ldr	r2, [pc, #452]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b6f      	ldr	r3, [pc, #444]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a6e      	ldr	r2, [pc, #440]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0xd4>
 80016ec:	4b6b      	ldr	r3, [pc, #428]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a6a      	ldr	r2, [pc, #424]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b68      	ldr	r3, [pc, #416]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a67      	ldr	r2, [pc, #412]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001702:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fc12 	bl	8000f34 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff fc0e 	bl	8000f34 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e200      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b5d      	ldr	r3, [pc, #372]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0xe4>
 8001732:	e014      	b.n	800175e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fbfe 	bl	8000f34 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff fbfa 	bl	8000f34 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	; 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1ec      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x10c>
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d063      	beq.n	8001832 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800176a:	4b4c      	ldr	r3, [pc, #304]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001776:	4b49      	ldr	r3, [pc, #292]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b08      	cmp	r3, #8
 8001780:	d11c      	bne.n	80017bc <HAL_RCC_OscConfig+0x18c>
 8001782:	4b46      	ldr	r3, [pc, #280]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d116      	bne.n	80017bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	4b43      	ldr	r3, [pc, #268]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x176>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e1c0      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4939      	ldr	r1, [pc, #228]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	e03a      	b.n	8001832 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c4:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <HAL_RCC_OscConfig+0x270>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fbb3 	bl	8000f34 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fbaf 	bl	8000f34 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1a1      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4927      	ldr	r1, [pc, #156]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
 8001804:	e015      	b.n	8001832 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <HAL_RCC_OscConfig+0x270>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fb92 	bl	8000f34 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001814:	f7ff fb8e 	bl	8000f34 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e180      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d03a      	beq.n	80018b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d019      	beq.n	800187a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <HAL_RCC_OscConfig+0x274>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7ff fb72 	bl	8000f34 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff fb6e 	bl	8000f34 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e160      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_RCC_OscConfig+0x26c>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001872:	2001      	movs	r0, #1
 8001874:	f000 faf8 	bl	8001e68 <RCC_Delay>
 8001878:	e01c      	b.n	80018b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_RCC_OscConfig+0x274>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff fb58 	bl	8000f34 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001886:	e00f      	b.n	80018a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001888:	f7ff fb54 	bl	8000f34 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d908      	bls.n	80018a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e146      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	42420000 	.word	0x42420000
 80018a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a8:	4b92      	ldr	r3, [pc, #584]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1e9      	bne.n	8001888 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80a6 	beq.w	8001a0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018c6:	4b8b      	ldr	r3, [pc, #556]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10d      	bne.n	80018ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b88      	ldr	r3, [pc, #544]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a87      	ldr	r2, [pc, #540]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b85      	ldr	r3, [pc, #532]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ea:	2301      	movs	r3, #1
 80018ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ee:	4b82      	ldr	r3, [pc, #520]	; (8001af8 <HAL_RCC_OscConfig+0x4c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d118      	bne.n	800192c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018fa:	4b7f      	ldr	r3, [pc, #508]	; (8001af8 <HAL_RCC_OscConfig+0x4c8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a7e      	ldr	r2, [pc, #504]	; (8001af8 <HAL_RCC_OscConfig+0x4c8>)
 8001900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001906:	f7ff fb15 	bl	8000f34 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190e:	f7ff fb11 	bl	8000f34 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b64      	cmp	r3, #100	; 0x64
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e103      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	4b75      	ldr	r3, [pc, #468]	; (8001af8 <HAL_RCC_OscConfig+0x4c8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d106      	bne.n	8001942 <HAL_RCC_OscConfig+0x312>
 8001934:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4a6e      	ldr	r2, [pc, #440]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6213      	str	r3, [r2, #32]
 8001940:	e02d      	b.n	800199e <HAL_RCC_OscConfig+0x36e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x334>
 800194a:	4b6a      	ldr	r3, [pc, #424]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a69      	ldr	r2, [pc, #420]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4a66      	ldr	r2, [pc, #408]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	6213      	str	r3, [r2, #32]
 8001962:	e01c      	b.n	800199e <HAL_RCC_OscConfig+0x36e>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b05      	cmp	r3, #5
 800196a:	d10c      	bne.n	8001986 <HAL_RCC_OscConfig+0x356>
 800196c:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4a60      	ldr	r2, [pc, #384]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	6213      	str	r3, [r2, #32]
 8001978:	4b5e      	ldr	r3, [pc, #376]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4a5d      	ldr	r2, [pc, #372]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6213      	str	r3, [r2, #32]
 8001984:	e00b      	b.n	800199e <HAL_RCC_OscConfig+0x36e>
 8001986:	4b5b      	ldr	r3, [pc, #364]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4a5a      	ldr	r2, [pc, #360]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	6213      	str	r3, [r2, #32]
 8001992:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	4a57      	ldr	r2, [pc, #348]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	f023 0304 	bic.w	r3, r3, #4
 800199c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d015      	beq.n	80019d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a6:	f7ff fac5 	bl	8000f34 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ac:	e00a      	b.n	80019c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f7ff fac1 	bl	8000f34 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019bc:	4293      	cmp	r3, r2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e0b1      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c4:	4b4b      	ldr	r3, [pc, #300]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ee      	beq.n	80019ae <HAL_RCC_OscConfig+0x37e>
 80019d0:	e014      	b.n	80019fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff faaf 	bl	8000f34 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff faab 	bl	8000f34 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e09b      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f0:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ee      	bne.n	80019da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d105      	bne.n	8001a0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a02:	4b3c      	ldr	r3, [pc, #240]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a3b      	ldr	r2, [pc, #236]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8087 	beq.w	8001b26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d061      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d146      	bne.n	8001aba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff fa7f 	bl	8000f34 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff fa7b 	bl	8000f34 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e06d      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4c:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a60:	d108      	bne.n	8001a74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	4921      	ldr	r1, [pc, #132]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a74:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a19      	ldr	r1, [r3, #32]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	430b      	orrs	r3, r1
 8001a86:	491b      	ldr	r1, [pc, #108]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fa4f 	bl	8000f34 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff fa4b 	bl	8000f34 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e03d      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x46a>
 8001ab8:	e035      	b.n	8001b26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fa38 	bl	8000f34 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff fa34 	bl	8000f34 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e026      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x498>
 8001ae6:	e01e      	b.n	8001b26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e019      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40007000 	.word	0x40007000
 8001afc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_OscConfig+0x500>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0d0      	b.n	8001cea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b6a      	ldr	r3, [pc, #424]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d910      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b67      	ldr	r3, [pc, #412]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 0207 	bic.w	r2, r3, #7
 8001b5e:	4965      	ldr	r1, [pc, #404]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0b8      	b.n	8001cea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d020      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b90:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba8:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a52      	ldr	r2, [pc, #328]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b50      	ldr	r3, [pc, #320]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	494d      	ldr	r1, [pc, #308]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d040      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d115      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e07f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf2:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e073      	b.n	8001cea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c02:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e06b      	b.n	8001cea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c12:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f023 0203 	bic.w	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4936      	ldr	r1, [pc, #216]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c24:	f7ff f986 	bl	8000f34 <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2c:	f7ff f982 	bl	8000f34 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e053      	b.n	8001cea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 020c 	and.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1eb      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c54:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d210      	bcs.n	8001c84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c62:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 0207 	bic.w	r2, r3, #7
 8001c6a:	4922      	ldr	r1, [pc, #136]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e032      	b.n	8001cea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4916      	ldr	r1, [pc, #88]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cc2:	f000 f82d 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	490a      	ldr	r1, [pc, #40]	; (8001cfc <HAL_RCC_ClockConfig+0x1c8>)
 8001cd4:	5ccb      	ldrb	r3, [r1, r3]
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_RCC_ClockConfig+0x1cc>)
 8001cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCC_ClockConfig+0x1d0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f8e4 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40022000 	.word	0x40022000
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08004924 	.word	0x08004924
 8001d00:	20000008 	.word	0x20000008
 8001d04:	2000000c 	.word	0x2000000c

08001d08 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <HAL_RCC_EnableCSS+0x14>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	4242004c 	.word	0x4242004c

08001d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b490      	push	{r4, r7}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xac>)
 8001d28:	1d3c      	adds	r4, r7, #4
 8001d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d30:	f240 2301 	movw	r3, #513	; 0x201
 8001d34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x40>
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d003      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x46>
 8001d5e:	e02b      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d62:	623b      	str	r3, [r7, #32]
      break;
 8001d64:	e02b      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	0c9b      	lsrs	r3, r3, #18
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3328      	adds	r3, #40	; 0x28
 8001d70:	443b      	add	r3, r7
 8001d72:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d76:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d012      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0c5b      	lsrs	r3, r3, #17
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	3328      	adds	r3, #40	; 0x28
 8001d8e:	443b      	add	r3, r7
 8001d90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d9a:	fb03 f202 	mul.w	r2, r3, r2
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
 8001da6:	e004      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dac:	fb02 f303 	mul.w	r3, r2, r3
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	623b      	str	r3, [r7, #32]
      break;
 8001db6:	e002      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dba:	623b      	str	r3, [r7, #32]
      break;
 8001dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3728      	adds	r7, #40	; 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc90      	pop	{r4, r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	08004914 	.word	0x08004914
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	007a1200 	.word	0x007a1200
 8001dd8:	003d0900 	.word	0x003d0900

08001ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <HAL_RCC_GetHCLKFreq+0x10>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	20000008 	.word	0x20000008

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df4:	f7ff fff2 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08004934 	.word	0x08004934

08001e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e1c:	f7ff ffde 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	0adb      	lsrs	r3, r3, #11
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08004934 	.word	0x08004934

08001e40 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b80      	cmp	r3, #128	; 0x80
 8001e4e:	d104      	bne.n	8001e5a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001e50:	f000 f828 	bl	8001ea4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	701a      	strb	r2, [r3, #0]
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	4002100a 	.word	0x4002100a

08001e68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <RCC_Delay+0x34>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <RCC_Delay+0x38>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0a5b      	lsrs	r3, r3, #9
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e84:	bf00      	nop
  }
  while (Delay --);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	60fa      	str	r2, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f9      	bne.n	8001e84 <RCC_Delay+0x1c>
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	10624dd3 	.word	0x10624dd3

08001ea4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e041      	b.n	8001f46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fed8 	bl	8000c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3304      	adds	r3, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4610      	mov	r0, r2
 8001ef0:	f000 fc80 	bl	80027f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e041      	b.n	8001fe4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f839 	bl	8001fec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f000 fc31 	bl	80027f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2200      	movs	r2, #0
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fe6e 	bl	8002cf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <HAL_TIM_PWM_Stop+0xc4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d117      	bne.n	8002052 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	f241 1311 	movw	r3, #4369	; 0x1111
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10f      	bne.n	8002052 <HAL_TIM_PWM_Stop+0x52>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a1a      	ldr	r2, [r3, #32]
 8002038:	f240 4344 	movw	r3, #1092	; 0x444
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d107      	bne.n	8002052 <HAL_TIM_PWM_Stop+0x52>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002050:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6a1a      	ldr	r2, [r3, #32]
 8002058:	f241 1311 	movw	r3, #4369	; 0x1111
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10f      	bne.n	8002082 <HAL_TIM_PWM_Stop+0x82>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6a1a      	ldr	r2, [r3, #32]
 8002068:	f240 4344 	movw	r3, #1092	; 0x444
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d107      	bne.n	8002082 <HAL_TIM_PWM_Stop+0x82>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d104      	bne.n	8002092 <HAL_TIM_PWM_Stop+0x92>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002090:	e013      	b.n	80020ba <HAL_TIM_PWM_Stop+0xba>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d104      	bne.n	80020a2 <HAL_TIM_PWM_Stop+0xa2>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020a0:	e00b      	b.n	80020ba <HAL_TIM_PWM_Stop+0xba>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d104      	bne.n	80020b2 <HAL_TIM_PWM_Stop+0xb2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020b0:	e003      	b.n	80020ba <HAL_TIM_PWM_Stop+0xba>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40012c00 	.word	0x40012c00

080020c8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <HAL_TIM_PWM_Start_IT+0x24>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	bf14      	ite	ne
 80020e4:	2301      	movne	r3, #1
 80020e6:	2300      	moveq	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	e022      	b.n	8002132 <HAL_TIM_PWM_Start_IT+0x6a>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d109      	bne.n	8002106 <HAL_TIM_PWM_Start_IT+0x3e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	bf14      	ite	ne
 80020fe:	2301      	movne	r3, #1
 8002100:	2300      	moveq	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	e015      	b.n	8002132 <HAL_TIM_PWM_Start_IT+0x6a>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d109      	bne.n	8002120 <HAL_TIM_PWM_Start_IT+0x58>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	bf14      	ite	ne
 8002118:	2301      	movne	r3, #1
 800211a:	2300      	moveq	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e008      	b.n	8002132 <HAL_TIM_PWM_Start_IT+0x6a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0a4      	b.n	8002284 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d104      	bne.n	800214a <HAL_TIM_PWM_Start_IT+0x82>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002148:	e013      	b.n	8002172 <HAL_TIM_PWM_Start_IT+0xaa>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d104      	bne.n	800215a <HAL_TIM_PWM_Start_IT+0x92>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002158:	e00b      	b.n	8002172 <HAL_TIM_PWM_Start_IT+0xaa>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d104      	bne.n	800216a <HAL_TIM_PWM_Start_IT+0xa2>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002168:	e003      	b.n	8002172 <HAL_TIM_PWM_Start_IT+0xaa>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b0c      	cmp	r3, #12
 8002176:	d841      	bhi.n	80021fc <HAL_TIM_PWM_Start_IT+0x134>
 8002178:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <HAL_TIM_PWM_Start_IT+0xb8>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	080021b5 	.word	0x080021b5
 8002184:	080021fd 	.word	0x080021fd
 8002188:	080021fd 	.word	0x080021fd
 800218c:	080021fd 	.word	0x080021fd
 8002190:	080021c7 	.word	0x080021c7
 8002194:	080021fd 	.word	0x080021fd
 8002198:	080021fd 	.word	0x080021fd
 800219c:	080021fd 	.word	0x080021fd
 80021a0:	080021d9 	.word	0x080021d9
 80021a4:	080021fd 	.word	0x080021fd
 80021a8:	080021fd 	.word	0x080021fd
 80021ac:	080021fd 	.word	0x080021fd
 80021b0:	080021eb 	.word	0x080021eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0202 	orr.w	r2, r2, #2
 80021c2:	60da      	str	r2, [r3, #12]
      break;
 80021c4:	e01b      	b.n	80021fe <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0204 	orr.w	r2, r2, #4
 80021d4:	60da      	str	r2, [r3, #12]
      break;
 80021d6:	e012      	b.n	80021fe <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0208 	orr.w	r2, r2, #8
 80021e6:	60da      	str	r2, [r3, #12]
      break;
 80021e8:	e009      	b.n	80021fe <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0210 	orr.w	r2, r2, #16
 80021f8:	60da      	str	r2, [r3, #12]
      break;
 80021fa:	e000      	b.n	80021fe <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80021fc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2201      	movs	r2, #1
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fd74 	bl	8002cf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1e      	ldr	r2, [pc, #120]	; (800228c <HAL_TIM_PWM_Start_IT+0x1c4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d107      	bne.n	8002226 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a18      	ldr	r2, [pc, #96]	; (800228c <HAL_TIM_PWM_Start_IT+0x1c4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00e      	beq.n	800224e <HAL_TIM_PWM_Start_IT+0x186>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002238:	d009      	beq.n	800224e <HAL_TIM_PWM_Start_IT+0x186>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_TIM_PWM_Start_IT+0x186>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a12      	ldr	r2, [pc, #72]	; (8002294 <HAL_TIM_PWM_Start_IT+0x1cc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d111      	bne.n	8002272 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b06      	cmp	r3, #6
 800225e:	d010      	beq.n	8002282 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002270:	e007      	b.n	8002282 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0201 	orr.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40012c00 	.word	0x40012c00
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800

08002298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d122      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d11b      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0202 	mvn.w	r2, #2
 80022c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fa78 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 80022e0:	e005      	b.n	80022ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fa6b 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7fe f9f1 	bl	80006d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d122      	bne.n	8002348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b04      	cmp	r3, #4
 800230e:	d11b      	bne.n	8002348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0204 	mvn.w	r2, #4
 8002318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2202      	movs	r2, #2
 800231e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fa4e 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8002334:	e005      	b.n	8002342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 fa41 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7fe f9c7 	bl	80006d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b08      	cmp	r3, #8
 8002354:	d122      	bne.n	800239c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b08      	cmp	r3, #8
 8002362:	d11b      	bne.n	800239c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0208 	mvn.w	r2, #8
 800236c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2204      	movs	r2, #4
 8002372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fa24 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8002388:	e005      	b.n	8002396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fa17 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7fe f99d 	bl	80006d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d122      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b10      	cmp	r3, #16
 80023b6:	d11b      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0210 	mvn.w	r2, #16
 80023c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2208      	movs	r2, #8
 80023c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f9fa 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f9ed 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe f973 	bl	80006d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10e      	bne.n	800241c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d107      	bne.n	800241c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0201 	mvn.w	r2, #1
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f9c8 	bl	80027ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002426:	2b80      	cmp	r3, #128	; 0x80
 8002428:	d10e      	bne.n	8002448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002434:	2b80      	cmp	r3, #128	; 0x80
 8002436:	d107      	bne.n	8002448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fce1 	bl	8002e0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b40      	cmp	r3, #64	; 0x40
 8002454:	d10e      	bne.n	8002474 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d107      	bne.n	8002474 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800246c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f9b7 	bl	80027e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b20      	cmp	r3, #32
 8002480:	d10e      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b20      	cmp	r3, #32
 800248e:	d107      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0220 	mvn.w	r2, #32
 8002498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fcac 	bl	8002df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024be:	2302      	movs	r3, #2
 80024c0:	e0ac      	b.n	800261c <HAL_TIM_PWM_ConfigChannel+0x174>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	f200 809f 	bhi.w	8002610 <HAL_TIM_PWM_ConfigChannel+0x168>
 80024d2:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	0800250d 	.word	0x0800250d
 80024dc:	08002611 	.word	0x08002611
 80024e0:	08002611 	.word	0x08002611
 80024e4:	08002611 	.word	0x08002611
 80024e8:	0800254d 	.word	0x0800254d
 80024ec:	08002611 	.word	0x08002611
 80024f0:	08002611 	.word	0x08002611
 80024f4:	08002611 	.word	0x08002611
 80024f8:	0800258f 	.word	0x0800258f
 80024fc:	08002611 	.word	0x08002611
 8002500:	08002611 	.word	0x08002611
 8002504:	08002611 	.word	0x08002611
 8002508:	080025cf 	.word	0x080025cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f9d0 	bl	80028b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0208 	orr.w	r2, r2, #8
 8002526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0204 	bic.w	r2, r2, #4
 8002536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6999      	ldr	r1, [r3, #24]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	619a      	str	r2, [r3, #24]
      break;
 800254a:	e062      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fa16 	bl	8002984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699a      	ldr	r2, [r3, #24]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6999      	ldr	r1, [r3, #24]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	021a      	lsls	r2, r3, #8
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	619a      	str	r2, [r3, #24]
      break;
 800258c:	e041      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fa5f 	bl	8002a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0208 	orr.w	r2, r2, #8
 80025a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0204 	bic.w	r2, r2, #4
 80025b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69d9      	ldr	r1, [r3, #28]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	61da      	str	r2, [r3, #28]
      break;
 80025cc:	e021      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 faa9 	bl	8002b2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69d9      	ldr	r1, [r3, #28]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	021a      	lsls	r2, r3, #8
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	61da      	str	r2, [r3, #28]
      break;
 800260e:	e000      	b.n	8002612 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002610:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_TIM_ConfigClockSource+0x18>
 8002638:	2302      	movs	r3, #2
 800263a:	e0b3      	b.n	80027a4 <HAL_TIM_ConfigClockSource+0x180>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800265a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002662:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002674:	d03e      	beq.n	80026f4 <HAL_TIM_ConfigClockSource+0xd0>
 8002676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267a:	f200 8087 	bhi.w	800278c <HAL_TIM_ConfigClockSource+0x168>
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	f000 8085 	beq.w	8002790 <HAL_TIM_ConfigClockSource+0x16c>
 8002686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268a:	d87f      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 800268c:	2b70      	cmp	r3, #112	; 0x70
 800268e:	d01a      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0xa2>
 8002690:	2b70      	cmp	r3, #112	; 0x70
 8002692:	d87b      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 8002694:	2b60      	cmp	r3, #96	; 0x60
 8002696:	d050      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x116>
 8002698:	2b60      	cmp	r3, #96	; 0x60
 800269a:	d877      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 800269c:	2b50      	cmp	r3, #80	; 0x50
 800269e:	d03c      	beq.n	800271a <HAL_TIM_ConfigClockSource+0xf6>
 80026a0:	2b50      	cmp	r3, #80	; 0x50
 80026a2:	d873      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 80026a4:	2b40      	cmp	r3, #64	; 0x40
 80026a6:	d058      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x136>
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d86f      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 80026ac:	2b30      	cmp	r3, #48	; 0x30
 80026ae:	d064      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x156>
 80026b0:	2b30      	cmp	r3, #48	; 0x30
 80026b2:	d86b      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	d060      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x156>
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d867      	bhi.n	800278c <HAL_TIM_ConfigClockSource+0x168>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d05c      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x156>
 80026c0:	2b10      	cmp	r3, #16
 80026c2:	d05a      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026c4:	e062      	b.n	800278c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f000 faee 	bl	8002cb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	609a      	str	r2, [r3, #8]
      break;
 80026f2:	e04e      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6899      	ldr	r1, [r3, #8]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f000 fad7 	bl	8002cb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002716:	609a      	str	r2, [r3, #8]
      break;
 8002718:	e03b      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	461a      	mov	r2, r3
 8002728:	f000 fa4e 	bl	8002bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2150      	movs	r1, #80	; 0x50
 8002732:	4618      	mov	r0, r3
 8002734:	f000 faa5 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002738:	e02b      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	461a      	mov	r2, r3
 8002748:	f000 fa6c 	bl	8002c24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2160      	movs	r1, #96	; 0x60
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fa95 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002758:	e01b      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	461a      	mov	r2, r3
 8002768:	f000 fa2e 	bl	8002bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2140      	movs	r1, #64	; 0x40
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fa85 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002778:	e00b      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f000 fa7c 	bl	8002c82 <TIM_ITRx_SetConfig>
        break;
 800278a:	e002      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800278c:	bf00      	nop
 800278e:	e000      	b.n	8002792 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002790:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a29      	ldr	r2, [pc, #164]	; (80028ac <TIM_Base_SetConfig+0xb8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00b      	beq.n	8002824 <TIM_Base_SetConfig+0x30>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002812:	d007      	beq.n	8002824 <TIM_Base_SetConfig+0x30>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a26      	ldr	r2, [pc, #152]	; (80028b0 <TIM_Base_SetConfig+0xbc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d003      	beq.n	8002824 <TIM_Base_SetConfig+0x30>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a25      	ldr	r2, [pc, #148]	; (80028b4 <TIM_Base_SetConfig+0xc0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d108      	bne.n	8002836 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <TIM_Base_SetConfig+0xb8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00b      	beq.n	8002856 <TIM_Base_SetConfig+0x62>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d007      	beq.n	8002856 <TIM_Base_SetConfig+0x62>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <TIM_Base_SetConfig+0xbc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d003      	beq.n	8002856 <TIM_Base_SetConfig+0x62>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <TIM_Base_SetConfig+0xc0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d108      	bne.n	8002868 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a07      	ldr	r2, [pc, #28]	; (80028ac <TIM_Base_SetConfig+0xb8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d103      	bne.n	800289c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	615a      	str	r2, [r3, #20]
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40000800 	.word	0x40000800

080028b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	f023 0201 	bic.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0303 	bic.w	r3, r3, #3
 80028ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f023 0302 	bic.w	r3, r3, #2
 8002900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <TIM_OC1_SetConfig+0xc8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d10c      	bne.n	800292e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f023 0308 	bic.w	r3, r3, #8
 800291a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f023 0304 	bic.w	r3, r3, #4
 800292c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a13      	ldr	r2, [pc, #76]	; (8002980 <TIM_OC1_SetConfig+0xc8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d111      	bne.n	800295a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800293c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	621a      	str	r2, [r3, #32]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00

08002984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f023 0210 	bic.w	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f023 0320 	bic.w	r3, r3, #32
 80029ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <TIM_OC2_SetConfig+0xd0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d10d      	bne.n	8002a00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <TIM_OC2_SetConfig+0xd0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d113      	bne.n	8002a30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40012c00 	.word	0x40012c00

08002a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0303 	bic.w	r3, r3, #3
 8002a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <TIM_OC3_SetConfig+0xd0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d10d      	bne.n	8002ad2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <TIM_OC3_SetConfig+0xd0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d113      	bne.n	8002b02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	621a      	str	r2, [r3, #32]
}
 8002b1c:	bf00      	nop
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00

08002b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	031b      	lsls	r3, r3, #12
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a0f      	ldr	r2, [pc, #60]	; (8002bc4 <TIM_OC4_SetConfig+0x98>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d109      	bne.n	8002ba0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	019b      	lsls	r3, r3, #6
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	621a      	str	r2, [r3, #32]
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40012c00 	.word	0x40012c00

08002bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f023 0201 	bic.w	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f023 030a 	bic.w	r3, r3, #10
 8002c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	621a      	str	r2, [r3, #32]
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f023 0210 	bic.w	r2, r3, #16
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	031b      	lsls	r3, r3, #12
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	621a      	str	r2, [r3, #32]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b085      	sub	sp, #20
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f043 0307 	orr.w	r3, r3, #7
 8002ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	609a      	str	r2, [r3, #8]
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	021a      	lsls	r2, r3, #8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	609a      	str	r2, [r3, #8]
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2201      	movs	r2, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1a      	ldr	r2, [r3, #32]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	401a      	ands	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a1a      	ldr	r2, [r3, #32]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e046      	b.n	8002de2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a16      	ldr	r2, [pc, #88]	; (8002dec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00e      	beq.n	8002db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d009      	beq.n	8002db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d004      	beq.n	8002db6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d10c      	bne.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800

08002df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e03f      	b.n	8002eae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fd ffa4 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fb83 	bl	800356c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b08a      	sub	sp, #40	; 0x28
 8002eba:	af02      	add	r7, sp, #8
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d17c      	bne.n	8002fd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_UART_Transmit+0x2c>
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e075      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_UART_Transmit+0x3e>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e06e      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2221      	movs	r2, #33	; 0x21
 8002f06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f0a:	f7fe f813 	bl	8000f34 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f24:	d108      	bne.n	8002f38 <HAL_UART_Transmit+0x82>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e003      	b.n	8002f40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002f48:	e02a      	b.n	8002fa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2180      	movs	r1, #128	; 0x80
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f9a7 	bl	80032a8 <UART_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e036      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	e007      	b.n	8002f92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1cf      	bne.n	8002f4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2140      	movs	r1, #64	; 0x40
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f977 	bl	80032a8 <UART_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e006      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	e000      	b.n	8002fd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
  }
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d140      	bne.n	8003076 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_UART_Receive_IT+0x26>
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e039      	b.n	8003078 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_UART_Receive_IT+0x38>
 800300e:	2302      	movs	r3, #2
 8003010:	e032      	b.n	8003078 <HAL_UART_Receive_IT+0x9e>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2222      	movs	r2, #34	; 0x22
 8003036:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003050:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0201 	orr.w	r2, r2, #1
 8003060:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 0220 	orr.w	r2, r2, #32
 8003070:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003076:	2302      	movs	r3, #2
  }
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
	...

08003084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10d      	bne.n	80030d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_UART_IRQHandler+0x52>
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f9cc 	bl	800346c <UART_Receive_IT>
      return;
 80030d4:	e0d0      	b.n	8003278 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80b0 	beq.w	800323e <HAL_UART_IRQHandler+0x1ba>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_UART_IRQHandler+0x70>
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80a5 	beq.w	800323e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_UART_IRQHandler+0x90>
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_UART_IRQHandler+0xb0>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	f043 0202 	orr.w	r2, r3, #2
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_UART_IRQHandler+0xd0>
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314c:	f043 0204 	orr.w	r2, r3, #4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00f      	beq.n	800317e <HAL_UART_IRQHandler+0xfa>
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d104      	bne.n	8003172 <HAL_UART_IRQHandler+0xee>
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	f043 0208 	orr.w	r2, r3, #8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d077      	beq.n	8003276 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_UART_IRQHandler+0x11c>
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f966 	bl	800346c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bf14      	ite	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	2300      	moveq	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <HAL_UART_IRQHandler+0x144>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d031      	beq.n	800322c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8b7 	bl	800333c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d023      	beq.n	8003224 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d013      	beq.n	800321c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	4a21      	ldr	r2, [pc, #132]	; (8003280 <HAL_UART_IRQHandler+0x1fc>)
 80031fa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd ffd3 	bl	80011ac <HAL_DMA_Abort_IT>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d016      	beq.n	800323a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003216:	4610      	mov	r0, r2
 8003218:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321a:	e00e      	b.n	800323a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f83a 	bl	8003296 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003222:	e00a      	b.n	800323a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f836 	bl	8003296 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800322a:	e006      	b.n	800323a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f832 	bl	8003296 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003238:	e01d      	b.n	8003276 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323a:	bf00      	nop
    return;
 800323c:	e01b      	b.n	8003276 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_UART_IRQHandler+0x1d6>
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8a3 	bl	800339e <UART_Transmit_IT>
    return;
 8003258:	e00e      	b.n	8003278 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d009      	beq.n	8003278 <HAL_UART_IRQHandler+0x1f4>
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f8e4 	bl	800343c <UART_EndTransmit_IT>
    return;
 8003274:	e000      	b.n	8003278 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003276:	bf00      	nop
  }
}
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	08003377 	.word	0x08003377

08003284 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b8:	e02c      	b.n	8003314 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d028      	beq.n	8003314 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032c8:	f7fd fe34 	bl	8000f34 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d21d      	bcs.n	8003314 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032e6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0201 	bic.w	r2, r2, #1
 80032f6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e00f      	b.n	8003334 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	429a      	cmp	r2, r3
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	429a      	cmp	r2, r3
 8003330:	d0c3      	beq.n	80032ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003352:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f7ff ff80 	bl	8003296 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b21      	cmp	r3, #33	; 0x21
 80033b0:	d13e      	bne.n	8003430 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ba:	d114      	bne.n	80033e6 <UART_Transmit_IT+0x48>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d110      	bne.n	80033e6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	1c9a      	adds	r2, r3, #2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	621a      	str	r2, [r3, #32]
 80033e4:	e008      	b.n	80033f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	1c59      	adds	r1, r3, #1
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6211      	str	r1, [r2, #32]
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29b      	uxth	r3, r3
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4619      	mov	r1, r3
 8003406:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10f      	bne.n	800342c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800341a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800342a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003452:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff11 	bl	8003284 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b22      	cmp	r3, #34	; 0x22
 800347e:	d170      	bne.n	8003562 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003488:	d117      	bne.n	80034ba <UART_Receive_IT+0x4e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d113      	bne.n	80034ba <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	1c9a      	adds	r2, r3, #2
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
 80034b8:	e026      	b.n	8003508 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034cc:	d007      	beq.n	80034de <UART_Receive_IT+0x72>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <UART_Receive_IT+0x80>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e008      	b.n	80034fe <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b29b      	uxth	r3, r3
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4619      	mov	r1, r3
 8003516:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003518:	2b00      	cmp	r3, #0
 800351a:	d120      	bne.n	800355e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0220 	bic.w	r2, r2, #32
 800352a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800353a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7fc ff35 	bl	80003c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e002      	b.n	8003564 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
  }
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80035a6:	f023 030c 	bic.w	r3, r3, #12
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a2c      	ldr	r2, [pc, #176]	; (8003680 <UART_SetConfig+0x114>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035d4:	f7fe fc20 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	e002      	b.n	80035e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035dc:	f7fe fc08 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
 80035e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009a      	lsls	r2, r3, #2
 80035ec:	441a      	add	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	4a22      	ldr	r2, [pc, #136]	; (8003684 <UART_SetConfig+0x118>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	0119      	lsls	r1, r3, #4
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	009a      	lsls	r2, r3, #2
 800360c:	441a      	add	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	fbb2 f2f3 	udiv	r2, r2, r3
 8003618:	4b1a      	ldr	r3, [pc, #104]	; (8003684 <UART_SetConfig+0x118>)
 800361a:	fba3 0302 	umull	r0, r3, r3, r2
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2064      	movs	r0, #100	; 0x64
 8003622:	fb00 f303 	mul.w	r3, r0, r3
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	3332      	adds	r3, #50	; 0x32
 800362c:	4a15      	ldr	r2, [pc, #84]	; (8003684 <UART_SetConfig+0x118>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003638:	4419      	add	r1, r3
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	009a      	lsls	r2, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <UART_SetConfig+0x118>)
 8003652:	fba3 0302 	umull	r0, r3, r3, r2
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2064      	movs	r0, #100	; 0x64
 800365a:	fb00 f303 	mul.w	r3, r0, r3
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	3332      	adds	r3, #50	; 0x32
 8003664:	4a07      	ldr	r2, [pc, #28]	; (8003684 <UART_SetConfig+0x118>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	f003 020f 	and.w	r2, r3, #15
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	440a      	add	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40013800 	.word	0x40013800
 8003684:	51eb851f 	.word	0x51eb851f

08003688 <DWT_Delay_Init>:
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) 
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800368c:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <DWT_Delay_Init+0x58>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <DWT_Delay_Init+0x58>)
 8003692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003696:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <DWT_Delay_Init+0x58>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <DWT_Delay_Init+0x58>)
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80036a4:	4b0f      	ldr	r3, [pc, #60]	; (80036e4 <DWT_Delay_Init+0x5c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0e      	ldr	r2, [pc, #56]	; (80036e4 <DWT_Delay_Init+0x5c>)
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <DWT_Delay_Init+0x5c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <DWT_Delay_Init+0x5c>)
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <DWT_Delay_Init+0x5c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80036c2:	bf00      	nop
     __ASM volatile ("NOP");
 80036c4:	bf00      	nop
  __ASM volatile ("NOP");
 80036c6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <DWT_Delay_Init+0x5c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80036d0:	2300      	movs	r3, #0
 80036d2:	e000      	b.n	80036d6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80036d4:	2301      	movs	r3, #1
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	e000edf0 	.word	0xe000edf0
 80036e4:	e0001000 	.word	0xe0001000

080036e8 <atoi>:
 80036e8:	220a      	movs	r2, #10
 80036ea:	2100      	movs	r1, #0
 80036ec:	f000 b93c 	b.w	8003968 <strtol>

080036f0 <__errno>:
 80036f0:	4b01      	ldr	r3, [pc, #4]	; (80036f8 <__errno+0x8>)
 80036f2:	6818      	ldr	r0, [r3, #0]
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000014 	.word	0x20000014

080036fc <__libc_init_array>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	2600      	movs	r6, #0
 8003700:	4d0c      	ldr	r5, [pc, #48]	; (8003734 <__libc_init_array+0x38>)
 8003702:	4c0d      	ldr	r4, [pc, #52]	; (8003738 <__libc_init_array+0x3c>)
 8003704:	1b64      	subs	r4, r4, r5
 8003706:	10a4      	asrs	r4, r4, #2
 8003708:	42a6      	cmp	r6, r4
 800370a:	d109      	bne.n	8003720 <__libc_init_array+0x24>
 800370c:	f001 f8b2 	bl	8004874 <_init>
 8003710:	2600      	movs	r6, #0
 8003712:	4d0a      	ldr	r5, [pc, #40]	; (800373c <__libc_init_array+0x40>)
 8003714:	4c0a      	ldr	r4, [pc, #40]	; (8003740 <__libc_init_array+0x44>)
 8003716:	1b64      	subs	r4, r4, r5
 8003718:	10a4      	asrs	r4, r4, #2
 800371a:	42a6      	cmp	r6, r4
 800371c:	d105      	bne.n	800372a <__libc_init_array+0x2e>
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	f855 3b04 	ldr.w	r3, [r5], #4
 8003724:	4798      	blx	r3
 8003726:	3601      	adds	r6, #1
 8003728:	e7ee      	b.n	8003708 <__libc_init_array+0xc>
 800372a:	f855 3b04 	ldr.w	r3, [r5], #4
 800372e:	4798      	blx	r3
 8003730:	3601      	adds	r6, #1
 8003732:	e7f2      	b.n	800371a <__libc_init_array+0x1e>
 8003734:	08004ad8 	.word	0x08004ad8
 8003738:	08004ad8 	.word	0x08004ad8
 800373c:	08004ad8 	.word	0x08004ad8
 8003740:	08004adc 	.word	0x08004adc

08003744 <memset>:
 8003744:	4603      	mov	r3, r0
 8003746:	4402      	add	r2, r0
 8003748:	4293      	cmp	r3, r2
 800374a:	d100      	bne.n	800374e <memset+0xa>
 800374c:	4770      	bx	lr
 800374e:	f803 1b01 	strb.w	r1, [r3], #1
 8003752:	e7f9      	b.n	8003748 <memset+0x4>

08003754 <iprintf>:
 8003754:	b40f      	push	{r0, r1, r2, r3}
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <iprintf+0x2c>)
 8003758:	b513      	push	{r0, r1, r4, lr}
 800375a:	681c      	ldr	r4, [r3, #0]
 800375c:	b124      	cbz	r4, 8003768 <iprintf+0x14>
 800375e:	69a3      	ldr	r3, [r4, #24]
 8003760:	b913      	cbnz	r3, 8003768 <iprintf+0x14>
 8003762:	4620      	mov	r0, r4
 8003764:	f000 fae0 	bl	8003d28 <__sinit>
 8003768:	ab05      	add	r3, sp, #20
 800376a:	4620      	mov	r0, r4
 800376c:	9a04      	ldr	r2, [sp, #16]
 800376e:	68a1      	ldr	r1, [r4, #8]
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	f000 fce3 	bl	800413c <_vfiprintf_r>
 8003776:	b002      	add	sp, #8
 8003778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800377c:	b004      	add	sp, #16
 800377e:	4770      	bx	lr
 8003780:	20000014 	.word	0x20000014

08003784 <_puts_r>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	460e      	mov	r6, r1
 8003788:	4605      	mov	r5, r0
 800378a:	b118      	cbz	r0, 8003794 <_puts_r+0x10>
 800378c:	6983      	ldr	r3, [r0, #24]
 800378e:	b90b      	cbnz	r3, 8003794 <_puts_r+0x10>
 8003790:	f000 faca 	bl	8003d28 <__sinit>
 8003794:	69ab      	ldr	r3, [r5, #24]
 8003796:	68ac      	ldr	r4, [r5, #8]
 8003798:	b913      	cbnz	r3, 80037a0 <_puts_r+0x1c>
 800379a:	4628      	mov	r0, r5
 800379c:	f000 fac4 	bl	8003d28 <__sinit>
 80037a0:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <_puts_r+0xd0>)
 80037a2:	429c      	cmp	r4, r3
 80037a4:	d120      	bne.n	80037e8 <_puts_r+0x64>
 80037a6:	686c      	ldr	r4, [r5, #4]
 80037a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037aa:	07db      	lsls	r3, r3, #31
 80037ac:	d405      	bmi.n	80037ba <_puts_r+0x36>
 80037ae:	89a3      	ldrh	r3, [r4, #12]
 80037b0:	0598      	lsls	r0, r3, #22
 80037b2:	d402      	bmi.n	80037ba <_puts_r+0x36>
 80037b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037b6:	f000 fb55 	bl	8003e64 <__retarget_lock_acquire_recursive>
 80037ba:	89a3      	ldrh	r3, [r4, #12]
 80037bc:	0719      	lsls	r1, r3, #28
 80037be:	d51d      	bpl.n	80037fc <_puts_r+0x78>
 80037c0:	6923      	ldr	r3, [r4, #16]
 80037c2:	b1db      	cbz	r3, 80037fc <_puts_r+0x78>
 80037c4:	3e01      	subs	r6, #1
 80037c6:	68a3      	ldr	r3, [r4, #8]
 80037c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80037cc:	3b01      	subs	r3, #1
 80037ce:	60a3      	str	r3, [r4, #8]
 80037d0:	bb39      	cbnz	r1, 8003822 <_puts_r+0x9e>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	da38      	bge.n	8003848 <_puts_r+0xc4>
 80037d6:	4622      	mov	r2, r4
 80037d8:	210a      	movs	r1, #10
 80037da:	4628      	mov	r0, r5
 80037dc:	f000 f8ce 	bl	800397c <__swbuf_r>
 80037e0:	3001      	adds	r0, #1
 80037e2:	d011      	beq.n	8003808 <_puts_r+0x84>
 80037e4:	250a      	movs	r5, #10
 80037e6:	e011      	b.n	800380c <_puts_r+0x88>
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <_puts_r+0xd4>)
 80037ea:	429c      	cmp	r4, r3
 80037ec:	d101      	bne.n	80037f2 <_puts_r+0x6e>
 80037ee:	68ac      	ldr	r4, [r5, #8]
 80037f0:	e7da      	b.n	80037a8 <_puts_r+0x24>
 80037f2:	4b1a      	ldr	r3, [pc, #104]	; (800385c <_puts_r+0xd8>)
 80037f4:	429c      	cmp	r4, r3
 80037f6:	bf08      	it	eq
 80037f8:	68ec      	ldreq	r4, [r5, #12]
 80037fa:	e7d5      	b.n	80037a8 <_puts_r+0x24>
 80037fc:	4621      	mov	r1, r4
 80037fe:	4628      	mov	r0, r5
 8003800:	f000 f90e 	bl	8003a20 <__swsetup_r>
 8003804:	2800      	cmp	r0, #0
 8003806:	d0dd      	beq.n	80037c4 <_puts_r+0x40>
 8003808:	f04f 35ff 	mov.w	r5, #4294967295
 800380c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800380e:	07da      	lsls	r2, r3, #31
 8003810:	d405      	bmi.n	800381e <_puts_r+0x9a>
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	059b      	lsls	r3, r3, #22
 8003816:	d402      	bmi.n	800381e <_puts_r+0x9a>
 8003818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800381a:	f000 fb24 	bl	8003e66 <__retarget_lock_release_recursive>
 800381e:	4628      	mov	r0, r5
 8003820:	bd70      	pop	{r4, r5, r6, pc}
 8003822:	2b00      	cmp	r3, #0
 8003824:	da04      	bge.n	8003830 <_puts_r+0xac>
 8003826:	69a2      	ldr	r2, [r4, #24]
 8003828:	429a      	cmp	r2, r3
 800382a:	dc06      	bgt.n	800383a <_puts_r+0xb6>
 800382c:	290a      	cmp	r1, #10
 800382e:	d004      	beq.n	800383a <_puts_r+0xb6>
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	6022      	str	r2, [r4, #0]
 8003836:	7019      	strb	r1, [r3, #0]
 8003838:	e7c5      	b.n	80037c6 <_puts_r+0x42>
 800383a:	4622      	mov	r2, r4
 800383c:	4628      	mov	r0, r5
 800383e:	f000 f89d 	bl	800397c <__swbuf_r>
 8003842:	3001      	adds	r0, #1
 8003844:	d1bf      	bne.n	80037c6 <_puts_r+0x42>
 8003846:	e7df      	b.n	8003808 <_puts_r+0x84>
 8003848:	250a      	movs	r5, #10
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	6022      	str	r2, [r4, #0]
 8003850:	701d      	strb	r5, [r3, #0]
 8003852:	e7db      	b.n	800380c <_puts_r+0x88>
 8003854:	08004a64 	.word	0x08004a64
 8003858:	08004a84 	.word	0x08004a84
 800385c:	08004a44 	.word	0x08004a44

08003860 <puts>:
 8003860:	4b02      	ldr	r3, [pc, #8]	; (800386c <puts+0xc>)
 8003862:	4601      	mov	r1, r0
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	f7ff bf8d 	b.w	8003784 <_puts_r>
 800386a:	bf00      	nop
 800386c:	20000014 	.word	0x20000014

08003870 <_strtol_l.constprop.0>:
 8003870:	2b01      	cmp	r3, #1
 8003872:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003876:	4680      	mov	r8, r0
 8003878:	d001      	beq.n	800387e <_strtol_l.constprop.0+0xe>
 800387a:	2b24      	cmp	r3, #36	; 0x24
 800387c:	d906      	bls.n	800388c <_strtol_l.constprop.0+0x1c>
 800387e:	f7ff ff37 	bl	80036f0 <__errno>
 8003882:	2316      	movs	r3, #22
 8003884:	6003      	str	r3, [r0, #0]
 8003886:	2000      	movs	r0, #0
 8003888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800388c:	460d      	mov	r5, r1
 800388e:	4f35      	ldr	r7, [pc, #212]	; (8003964 <_strtol_l.constprop.0+0xf4>)
 8003890:	4628      	mov	r0, r5
 8003892:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003896:	5de6      	ldrb	r6, [r4, r7]
 8003898:	f016 0608 	ands.w	r6, r6, #8
 800389c:	d1f8      	bne.n	8003890 <_strtol_l.constprop.0+0x20>
 800389e:	2c2d      	cmp	r4, #45	; 0x2d
 80038a0:	d12f      	bne.n	8003902 <_strtol_l.constprop.0+0x92>
 80038a2:	2601      	movs	r6, #1
 80038a4:	782c      	ldrb	r4, [r5, #0]
 80038a6:	1c85      	adds	r5, r0, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d057      	beq.n	800395c <_strtol_l.constprop.0+0xec>
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d109      	bne.n	80038c4 <_strtol_l.constprop.0+0x54>
 80038b0:	2c30      	cmp	r4, #48	; 0x30
 80038b2:	d107      	bne.n	80038c4 <_strtol_l.constprop.0+0x54>
 80038b4:	7828      	ldrb	r0, [r5, #0]
 80038b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80038ba:	2858      	cmp	r0, #88	; 0x58
 80038bc:	d149      	bne.n	8003952 <_strtol_l.constprop.0+0xe2>
 80038be:	2310      	movs	r3, #16
 80038c0:	786c      	ldrb	r4, [r5, #1]
 80038c2:	3502      	adds	r5, #2
 80038c4:	2700      	movs	r7, #0
 80038c6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80038ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 80038ce:	fbbe f9f3 	udiv	r9, lr, r3
 80038d2:	4638      	mov	r0, r7
 80038d4:	fb03 ea19 	mls	sl, r3, r9, lr
 80038d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80038dc:	f1bc 0f09 	cmp.w	ip, #9
 80038e0:	d814      	bhi.n	800390c <_strtol_l.constprop.0+0x9c>
 80038e2:	4664      	mov	r4, ip
 80038e4:	42a3      	cmp	r3, r4
 80038e6:	dd22      	ble.n	800392e <_strtol_l.constprop.0+0xbe>
 80038e8:	2f00      	cmp	r7, #0
 80038ea:	db1d      	blt.n	8003928 <_strtol_l.constprop.0+0xb8>
 80038ec:	4581      	cmp	r9, r0
 80038ee:	d31b      	bcc.n	8003928 <_strtol_l.constprop.0+0xb8>
 80038f0:	d101      	bne.n	80038f6 <_strtol_l.constprop.0+0x86>
 80038f2:	45a2      	cmp	sl, r4
 80038f4:	db18      	blt.n	8003928 <_strtol_l.constprop.0+0xb8>
 80038f6:	2701      	movs	r7, #1
 80038f8:	fb00 4003 	mla	r0, r0, r3, r4
 80038fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003900:	e7ea      	b.n	80038d8 <_strtol_l.constprop.0+0x68>
 8003902:	2c2b      	cmp	r4, #43	; 0x2b
 8003904:	bf04      	itt	eq
 8003906:	782c      	ldrbeq	r4, [r5, #0]
 8003908:	1c85      	addeq	r5, r0, #2
 800390a:	e7cd      	b.n	80038a8 <_strtol_l.constprop.0+0x38>
 800390c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003910:	f1bc 0f19 	cmp.w	ip, #25
 8003914:	d801      	bhi.n	800391a <_strtol_l.constprop.0+0xaa>
 8003916:	3c37      	subs	r4, #55	; 0x37
 8003918:	e7e4      	b.n	80038e4 <_strtol_l.constprop.0+0x74>
 800391a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800391e:	f1bc 0f19 	cmp.w	ip, #25
 8003922:	d804      	bhi.n	800392e <_strtol_l.constprop.0+0xbe>
 8003924:	3c57      	subs	r4, #87	; 0x57
 8003926:	e7dd      	b.n	80038e4 <_strtol_l.constprop.0+0x74>
 8003928:	f04f 37ff 	mov.w	r7, #4294967295
 800392c:	e7e6      	b.n	80038fc <_strtol_l.constprop.0+0x8c>
 800392e:	2f00      	cmp	r7, #0
 8003930:	da07      	bge.n	8003942 <_strtol_l.constprop.0+0xd2>
 8003932:	2322      	movs	r3, #34	; 0x22
 8003934:	4670      	mov	r0, lr
 8003936:	f8c8 3000 	str.w	r3, [r8]
 800393a:	2a00      	cmp	r2, #0
 800393c:	d0a4      	beq.n	8003888 <_strtol_l.constprop.0+0x18>
 800393e:	1e69      	subs	r1, r5, #1
 8003940:	e005      	b.n	800394e <_strtol_l.constprop.0+0xde>
 8003942:	b106      	cbz	r6, 8003946 <_strtol_l.constprop.0+0xd6>
 8003944:	4240      	negs	r0, r0
 8003946:	2a00      	cmp	r2, #0
 8003948:	d09e      	beq.n	8003888 <_strtol_l.constprop.0+0x18>
 800394a:	2f00      	cmp	r7, #0
 800394c:	d1f7      	bne.n	800393e <_strtol_l.constprop.0+0xce>
 800394e:	6011      	str	r1, [r2, #0]
 8003950:	e79a      	b.n	8003888 <_strtol_l.constprop.0+0x18>
 8003952:	2430      	movs	r4, #48	; 0x30
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1b5      	bne.n	80038c4 <_strtol_l.constprop.0+0x54>
 8003958:	2308      	movs	r3, #8
 800395a:	e7b3      	b.n	80038c4 <_strtol_l.constprop.0+0x54>
 800395c:	2c30      	cmp	r4, #48	; 0x30
 800395e:	d0a9      	beq.n	80038b4 <_strtol_l.constprop.0+0x44>
 8003960:	230a      	movs	r3, #10
 8003962:	e7af      	b.n	80038c4 <_strtol_l.constprop.0+0x54>
 8003964:	08004941 	.word	0x08004941

08003968 <strtol>:
 8003968:	4613      	mov	r3, r2
 800396a:	460a      	mov	r2, r1
 800396c:	4601      	mov	r1, r0
 800396e:	4802      	ldr	r0, [pc, #8]	; (8003978 <strtol+0x10>)
 8003970:	6800      	ldr	r0, [r0, #0]
 8003972:	f7ff bf7d 	b.w	8003870 <_strtol_l.constprop.0>
 8003976:	bf00      	nop
 8003978:	20000014 	.word	0x20000014

0800397c <__swbuf_r>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	460e      	mov	r6, r1
 8003980:	4614      	mov	r4, r2
 8003982:	4605      	mov	r5, r0
 8003984:	b118      	cbz	r0, 800398e <__swbuf_r+0x12>
 8003986:	6983      	ldr	r3, [r0, #24]
 8003988:	b90b      	cbnz	r3, 800398e <__swbuf_r+0x12>
 800398a:	f000 f9cd 	bl	8003d28 <__sinit>
 800398e:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <__swbuf_r+0x98>)
 8003990:	429c      	cmp	r4, r3
 8003992:	d12b      	bne.n	80039ec <__swbuf_r+0x70>
 8003994:	686c      	ldr	r4, [r5, #4]
 8003996:	69a3      	ldr	r3, [r4, #24]
 8003998:	60a3      	str	r3, [r4, #8]
 800399a:	89a3      	ldrh	r3, [r4, #12]
 800399c:	071a      	lsls	r2, r3, #28
 800399e:	d52f      	bpl.n	8003a00 <__swbuf_r+0x84>
 80039a0:	6923      	ldr	r3, [r4, #16]
 80039a2:	b36b      	cbz	r3, 8003a00 <__swbuf_r+0x84>
 80039a4:	6923      	ldr	r3, [r4, #16]
 80039a6:	6820      	ldr	r0, [r4, #0]
 80039a8:	b2f6      	uxtb	r6, r6
 80039aa:	1ac0      	subs	r0, r0, r3
 80039ac:	6963      	ldr	r3, [r4, #20]
 80039ae:	4637      	mov	r7, r6
 80039b0:	4283      	cmp	r3, r0
 80039b2:	dc04      	bgt.n	80039be <__swbuf_r+0x42>
 80039b4:	4621      	mov	r1, r4
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 f922 	bl	8003c00 <_fflush_r>
 80039bc:	bb30      	cbnz	r0, 8003a0c <__swbuf_r+0x90>
 80039be:	68a3      	ldr	r3, [r4, #8]
 80039c0:	3001      	adds	r0, #1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	60a3      	str	r3, [r4, #8]
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	6022      	str	r2, [r4, #0]
 80039cc:	701e      	strb	r6, [r3, #0]
 80039ce:	6963      	ldr	r3, [r4, #20]
 80039d0:	4283      	cmp	r3, r0
 80039d2:	d004      	beq.n	80039de <__swbuf_r+0x62>
 80039d4:	89a3      	ldrh	r3, [r4, #12]
 80039d6:	07db      	lsls	r3, r3, #31
 80039d8:	d506      	bpl.n	80039e8 <__swbuf_r+0x6c>
 80039da:	2e0a      	cmp	r6, #10
 80039dc:	d104      	bne.n	80039e8 <__swbuf_r+0x6c>
 80039de:	4621      	mov	r1, r4
 80039e0:	4628      	mov	r0, r5
 80039e2:	f000 f90d 	bl	8003c00 <_fflush_r>
 80039e6:	b988      	cbnz	r0, 8003a0c <__swbuf_r+0x90>
 80039e8:	4638      	mov	r0, r7
 80039ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <__swbuf_r+0x9c>)
 80039ee:	429c      	cmp	r4, r3
 80039f0:	d101      	bne.n	80039f6 <__swbuf_r+0x7a>
 80039f2:	68ac      	ldr	r4, [r5, #8]
 80039f4:	e7cf      	b.n	8003996 <__swbuf_r+0x1a>
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <__swbuf_r+0xa0>)
 80039f8:	429c      	cmp	r4, r3
 80039fa:	bf08      	it	eq
 80039fc:	68ec      	ldreq	r4, [r5, #12]
 80039fe:	e7ca      	b.n	8003996 <__swbuf_r+0x1a>
 8003a00:	4621      	mov	r1, r4
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 f80c 	bl	8003a20 <__swsetup_r>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d0cb      	beq.n	80039a4 <__swbuf_r+0x28>
 8003a0c:	f04f 37ff 	mov.w	r7, #4294967295
 8003a10:	e7ea      	b.n	80039e8 <__swbuf_r+0x6c>
 8003a12:	bf00      	nop
 8003a14:	08004a64 	.word	0x08004a64
 8003a18:	08004a84 	.word	0x08004a84
 8003a1c:	08004a44 	.word	0x08004a44

08003a20 <__swsetup_r>:
 8003a20:	4b32      	ldr	r3, [pc, #200]	; (8003aec <__swsetup_r+0xcc>)
 8003a22:	b570      	push	{r4, r5, r6, lr}
 8003a24:	681d      	ldr	r5, [r3, #0]
 8003a26:	4606      	mov	r6, r0
 8003a28:	460c      	mov	r4, r1
 8003a2a:	b125      	cbz	r5, 8003a36 <__swsetup_r+0x16>
 8003a2c:	69ab      	ldr	r3, [r5, #24]
 8003a2e:	b913      	cbnz	r3, 8003a36 <__swsetup_r+0x16>
 8003a30:	4628      	mov	r0, r5
 8003a32:	f000 f979 	bl	8003d28 <__sinit>
 8003a36:	4b2e      	ldr	r3, [pc, #184]	; (8003af0 <__swsetup_r+0xd0>)
 8003a38:	429c      	cmp	r4, r3
 8003a3a:	d10f      	bne.n	8003a5c <__swsetup_r+0x3c>
 8003a3c:	686c      	ldr	r4, [r5, #4]
 8003a3e:	89a3      	ldrh	r3, [r4, #12]
 8003a40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a44:	0719      	lsls	r1, r3, #28
 8003a46:	d42c      	bmi.n	8003aa2 <__swsetup_r+0x82>
 8003a48:	06dd      	lsls	r5, r3, #27
 8003a4a:	d411      	bmi.n	8003a70 <__swsetup_r+0x50>
 8003a4c:	2309      	movs	r3, #9
 8003a4e:	6033      	str	r3, [r6, #0]
 8003a50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	81a3      	strh	r3, [r4, #12]
 8003a5a:	e03e      	b.n	8003ada <__swsetup_r+0xba>
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <__swsetup_r+0xd4>)
 8003a5e:	429c      	cmp	r4, r3
 8003a60:	d101      	bne.n	8003a66 <__swsetup_r+0x46>
 8003a62:	68ac      	ldr	r4, [r5, #8]
 8003a64:	e7eb      	b.n	8003a3e <__swsetup_r+0x1e>
 8003a66:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <__swsetup_r+0xd8>)
 8003a68:	429c      	cmp	r4, r3
 8003a6a:	bf08      	it	eq
 8003a6c:	68ec      	ldreq	r4, [r5, #12]
 8003a6e:	e7e6      	b.n	8003a3e <__swsetup_r+0x1e>
 8003a70:	0758      	lsls	r0, r3, #29
 8003a72:	d512      	bpl.n	8003a9a <__swsetup_r+0x7a>
 8003a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a76:	b141      	cbz	r1, 8003a8a <__swsetup_r+0x6a>
 8003a78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a7c:	4299      	cmp	r1, r3
 8003a7e:	d002      	beq.n	8003a86 <__swsetup_r+0x66>
 8003a80:	4630      	mov	r0, r6
 8003a82:	f000 fa57 	bl	8003f34 <_free_r>
 8003a86:	2300      	movs	r3, #0
 8003a88:	6363      	str	r3, [r4, #52]	; 0x34
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a90:	81a3      	strh	r3, [r4, #12]
 8003a92:	2300      	movs	r3, #0
 8003a94:	6063      	str	r3, [r4, #4]
 8003a96:	6923      	ldr	r3, [r4, #16]
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	89a3      	ldrh	r3, [r4, #12]
 8003a9c:	f043 0308 	orr.w	r3, r3, #8
 8003aa0:	81a3      	strh	r3, [r4, #12]
 8003aa2:	6923      	ldr	r3, [r4, #16]
 8003aa4:	b94b      	cbnz	r3, 8003aba <__swsetup_r+0x9a>
 8003aa6:	89a3      	ldrh	r3, [r4, #12]
 8003aa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab0:	d003      	beq.n	8003aba <__swsetup_r+0x9a>
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	f000 f9fd 	bl	8003eb4 <__smakebuf_r>
 8003aba:	89a0      	ldrh	r0, [r4, #12]
 8003abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ac0:	f010 0301 	ands.w	r3, r0, #1
 8003ac4:	d00a      	beq.n	8003adc <__swsetup_r+0xbc>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60a3      	str	r3, [r4, #8]
 8003aca:	6963      	ldr	r3, [r4, #20]
 8003acc:	425b      	negs	r3, r3
 8003ace:	61a3      	str	r3, [r4, #24]
 8003ad0:	6923      	ldr	r3, [r4, #16]
 8003ad2:	b943      	cbnz	r3, 8003ae6 <__swsetup_r+0xc6>
 8003ad4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ad8:	d1ba      	bne.n	8003a50 <__swsetup_r+0x30>
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	0781      	lsls	r1, r0, #30
 8003ade:	bf58      	it	pl
 8003ae0:	6963      	ldrpl	r3, [r4, #20]
 8003ae2:	60a3      	str	r3, [r4, #8]
 8003ae4:	e7f4      	b.n	8003ad0 <__swsetup_r+0xb0>
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	e7f7      	b.n	8003ada <__swsetup_r+0xba>
 8003aea:	bf00      	nop
 8003aec:	20000014 	.word	0x20000014
 8003af0:	08004a64 	.word	0x08004a64
 8003af4:	08004a84 	.word	0x08004a84
 8003af8:	08004a44 	.word	0x08004a44

08003afc <__sflush_r>:
 8003afc:	898a      	ldrh	r2, [r1, #12]
 8003afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b00:	4605      	mov	r5, r0
 8003b02:	0710      	lsls	r0, r2, #28
 8003b04:	460c      	mov	r4, r1
 8003b06:	d457      	bmi.n	8003bb8 <__sflush_r+0xbc>
 8003b08:	684b      	ldr	r3, [r1, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	dc04      	bgt.n	8003b18 <__sflush_r+0x1c>
 8003b0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	dc01      	bgt.n	8003b18 <__sflush_r+0x1c>
 8003b14:	2000      	movs	r0, #0
 8003b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b1a:	2e00      	cmp	r6, #0
 8003b1c:	d0fa      	beq.n	8003b14 <__sflush_r+0x18>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b24:	682f      	ldr	r7, [r5, #0]
 8003b26:	602b      	str	r3, [r5, #0]
 8003b28:	d032      	beq.n	8003b90 <__sflush_r+0x94>
 8003b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	075a      	lsls	r2, r3, #29
 8003b30:	d505      	bpl.n	8003b3e <__sflush_r+0x42>
 8003b32:	6863      	ldr	r3, [r4, #4]
 8003b34:	1ac0      	subs	r0, r0, r3
 8003b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b38:	b10b      	cbz	r3, 8003b3e <__sflush_r+0x42>
 8003b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b3c:	1ac0      	subs	r0, r0, r3
 8003b3e:	2300      	movs	r3, #0
 8003b40:	4602      	mov	r2, r0
 8003b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b44:	4628      	mov	r0, r5
 8003b46:	6a21      	ldr	r1, [r4, #32]
 8003b48:	47b0      	blx	r6
 8003b4a:	1c43      	adds	r3, r0, #1
 8003b4c:	89a3      	ldrh	r3, [r4, #12]
 8003b4e:	d106      	bne.n	8003b5e <__sflush_r+0x62>
 8003b50:	6829      	ldr	r1, [r5, #0]
 8003b52:	291d      	cmp	r1, #29
 8003b54:	d82c      	bhi.n	8003bb0 <__sflush_r+0xb4>
 8003b56:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <__sflush_r+0x100>)
 8003b58:	40ca      	lsrs	r2, r1
 8003b5a:	07d6      	lsls	r6, r2, #31
 8003b5c:	d528      	bpl.n	8003bb0 <__sflush_r+0xb4>
 8003b5e:	2200      	movs	r2, #0
 8003b60:	6062      	str	r2, [r4, #4]
 8003b62:	6922      	ldr	r2, [r4, #16]
 8003b64:	04d9      	lsls	r1, r3, #19
 8003b66:	6022      	str	r2, [r4, #0]
 8003b68:	d504      	bpl.n	8003b74 <__sflush_r+0x78>
 8003b6a:	1c42      	adds	r2, r0, #1
 8003b6c:	d101      	bne.n	8003b72 <__sflush_r+0x76>
 8003b6e:	682b      	ldr	r3, [r5, #0]
 8003b70:	b903      	cbnz	r3, 8003b74 <__sflush_r+0x78>
 8003b72:	6560      	str	r0, [r4, #84]	; 0x54
 8003b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b76:	602f      	str	r7, [r5, #0]
 8003b78:	2900      	cmp	r1, #0
 8003b7a:	d0cb      	beq.n	8003b14 <__sflush_r+0x18>
 8003b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b80:	4299      	cmp	r1, r3
 8003b82:	d002      	beq.n	8003b8a <__sflush_r+0x8e>
 8003b84:	4628      	mov	r0, r5
 8003b86:	f000 f9d5 	bl	8003f34 <_free_r>
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8003b8e:	e7c2      	b.n	8003b16 <__sflush_r+0x1a>
 8003b90:	6a21      	ldr	r1, [r4, #32]
 8003b92:	2301      	movs	r3, #1
 8003b94:	4628      	mov	r0, r5
 8003b96:	47b0      	blx	r6
 8003b98:	1c41      	adds	r1, r0, #1
 8003b9a:	d1c7      	bne.n	8003b2c <__sflush_r+0x30>
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0c4      	beq.n	8003b2c <__sflush_r+0x30>
 8003ba2:	2b1d      	cmp	r3, #29
 8003ba4:	d001      	beq.n	8003baa <__sflush_r+0xae>
 8003ba6:	2b16      	cmp	r3, #22
 8003ba8:	d101      	bne.n	8003bae <__sflush_r+0xb2>
 8003baa:	602f      	str	r7, [r5, #0]
 8003bac:	e7b2      	b.n	8003b14 <__sflush_r+0x18>
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb4:	81a3      	strh	r3, [r4, #12]
 8003bb6:	e7ae      	b.n	8003b16 <__sflush_r+0x1a>
 8003bb8:	690f      	ldr	r7, [r1, #16]
 8003bba:	2f00      	cmp	r7, #0
 8003bbc:	d0aa      	beq.n	8003b14 <__sflush_r+0x18>
 8003bbe:	0793      	lsls	r3, r2, #30
 8003bc0:	bf18      	it	ne
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	680e      	ldr	r6, [r1, #0]
 8003bc6:	bf08      	it	eq
 8003bc8:	694b      	ldreq	r3, [r1, #20]
 8003bca:	1bf6      	subs	r6, r6, r7
 8003bcc:	600f      	str	r7, [r1, #0]
 8003bce:	608b      	str	r3, [r1, #8]
 8003bd0:	2e00      	cmp	r6, #0
 8003bd2:	dd9f      	ble.n	8003b14 <__sflush_r+0x18>
 8003bd4:	4633      	mov	r3, r6
 8003bd6:	463a      	mov	r2, r7
 8003bd8:	4628      	mov	r0, r5
 8003bda:	6a21      	ldr	r1, [r4, #32]
 8003bdc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003be0:	47e0      	blx	ip
 8003be2:	2800      	cmp	r0, #0
 8003be4:	dc06      	bgt.n	8003bf4 <__sflush_r+0xf8>
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	e790      	b.n	8003b16 <__sflush_r+0x1a>
 8003bf4:	4407      	add	r7, r0
 8003bf6:	1a36      	subs	r6, r6, r0
 8003bf8:	e7ea      	b.n	8003bd0 <__sflush_r+0xd4>
 8003bfa:	bf00      	nop
 8003bfc:	20400001 	.word	0x20400001

08003c00 <_fflush_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	690b      	ldr	r3, [r1, #16]
 8003c04:	4605      	mov	r5, r0
 8003c06:	460c      	mov	r4, r1
 8003c08:	b913      	cbnz	r3, 8003c10 <_fflush_r+0x10>
 8003c0a:	2500      	movs	r5, #0
 8003c0c:	4628      	mov	r0, r5
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	b118      	cbz	r0, 8003c1a <_fflush_r+0x1a>
 8003c12:	6983      	ldr	r3, [r0, #24]
 8003c14:	b90b      	cbnz	r3, 8003c1a <_fflush_r+0x1a>
 8003c16:	f000 f887 	bl	8003d28 <__sinit>
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <_fflush_r+0x6c>)
 8003c1c:	429c      	cmp	r4, r3
 8003c1e:	d11b      	bne.n	8003c58 <_fflush_r+0x58>
 8003c20:	686c      	ldr	r4, [r5, #4]
 8003c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0ef      	beq.n	8003c0a <_fflush_r+0xa>
 8003c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c2c:	07d0      	lsls	r0, r2, #31
 8003c2e:	d404      	bmi.n	8003c3a <_fflush_r+0x3a>
 8003c30:	0599      	lsls	r1, r3, #22
 8003c32:	d402      	bmi.n	8003c3a <_fflush_r+0x3a>
 8003c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c36:	f000 f915 	bl	8003e64 <__retarget_lock_acquire_recursive>
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	f7ff ff5d 	bl	8003afc <__sflush_r>
 8003c42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c44:	4605      	mov	r5, r0
 8003c46:	07da      	lsls	r2, r3, #31
 8003c48:	d4e0      	bmi.n	8003c0c <_fflush_r+0xc>
 8003c4a:	89a3      	ldrh	r3, [r4, #12]
 8003c4c:	059b      	lsls	r3, r3, #22
 8003c4e:	d4dd      	bmi.n	8003c0c <_fflush_r+0xc>
 8003c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c52:	f000 f908 	bl	8003e66 <__retarget_lock_release_recursive>
 8003c56:	e7d9      	b.n	8003c0c <_fflush_r+0xc>
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <_fflush_r+0x70>)
 8003c5a:	429c      	cmp	r4, r3
 8003c5c:	d101      	bne.n	8003c62 <_fflush_r+0x62>
 8003c5e:	68ac      	ldr	r4, [r5, #8]
 8003c60:	e7df      	b.n	8003c22 <_fflush_r+0x22>
 8003c62:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <_fflush_r+0x74>)
 8003c64:	429c      	cmp	r4, r3
 8003c66:	bf08      	it	eq
 8003c68:	68ec      	ldreq	r4, [r5, #12]
 8003c6a:	e7da      	b.n	8003c22 <_fflush_r+0x22>
 8003c6c:	08004a64 	.word	0x08004a64
 8003c70:	08004a84 	.word	0x08004a84
 8003c74:	08004a44 	.word	0x08004a44

08003c78 <std>:
 8003c78:	2300      	movs	r3, #0
 8003c7a:	b510      	push	{r4, lr}
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c86:	6083      	str	r3, [r0, #8]
 8003c88:	8181      	strh	r1, [r0, #12]
 8003c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003c8c:	81c2      	strh	r2, [r0, #14]
 8003c8e:	6183      	str	r3, [r0, #24]
 8003c90:	4619      	mov	r1, r3
 8003c92:	2208      	movs	r2, #8
 8003c94:	305c      	adds	r0, #92	; 0x5c
 8003c96:	f7ff fd55 	bl	8003744 <memset>
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <std+0x38>)
 8003c9c:	6224      	str	r4, [r4, #32]
 8003c9e:	6263      	str	r3, [r4, #36]	; 0x24
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <std+0x3c>)
 8003ca2:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <std+0x40>)
 8003ca6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <std+0x44>)
 8003caa:	6323      	str	r3, [r4, #48]	; 0x30
 8003cac:	bd10      	pop	{r4, pc}
 8003cae:	bf00      	nop
 8003cb0:	080046e9 	.word	0x080046e9
 8003cb4:	0800470b 	.word	0x0800470b
 8003cb8:	08004743 	.word	0x08004743
 8003cbc:	08004767 	.word	0x08004767

08003cc0 <_cleanup_r>:
 8003cc0:	4901      	ldr	r1, [pc, #4]	; (8003cc8 <_cleanup_r+0x8>)
 8003cc2:	f000 b8af 	b.w	8003e24 <_fwalk_reent>
 8003cc6:	bf00      	nop
 8003cc8:	08003c01 	.word	0x08003c01

08003ccc <__sfmoreglue>:
 8003ccc:	2268      	movs	r2, #104	; 0x68
 8003cce:	b570      	push	{r4, r5, r6, lr}
 8003cd0:	1e4d      	subs	r5, r1, #1
 8003cd2:	4355      	muls	r5, r2
 8003cd4:	460e      	mov	r6, r1
 8003cd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cda:	f000 f993 	bl	8004004 <_malloc_r>
 8003cde:	4604      	mov	r4, r0
 8003ce0:	b140      	cbz	r0, 8003cf4 <__sfmoreglue+0x28>
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	e9c0 1600 	strd	r1, r6, [r0]
 8003ce8:	300c      	adds	r0, #12
 8003cea:	60a0      	str	r0, [r4, #8]
 8003cec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cf0:	f7ff fd28 	bl	8003744 <memset>
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}

08003cf8 <__sfp_lock_acquire>:
 8003cf8:	4801      	ldr	r0, [pc, #4]	; (8003d00 <__sfp_lock_acquire+0x8>)
 8003cfa:	f000 b8b3 	b.w	8003e64 <__retarget_lock_acquire_recursive>
 8003cfe:	bf00      	nop
 8003d00:	2000019d 	.word	0x2000019d

08003d04 <__sfp_lock_release>:
 8003d04:	4801      	ldr	r0, [pc, #4]	; (8003d0c <__sfp_lock_release+0x8>)
 8003d06:	f000 b8ae 	b.w	8003e66 <__retarget_lock_release_recursive>
 8003d0a:	bf00      	nop
 8003d0c:	2000019d 	.word	0x2000019d

08003d10 <__sinit_lock_acquire>:
 8003d10:	4801      	ldr	r0, [pc, #4]	; (8003d18 <__sinit_lock_acquire+0x8>)
 8003d12:	f000 b8a7 	b.w	8003e64 <__retarget_lock_acquire_recursive>
 8003d16:	bf00      	nop
 8003d18:	2000019e 	.word	0x2000019e

08003d1c <__sinit_lock_release>:
 8003d1c:	4801      	ldr	r0, [pc, #4]	; (8003d24 <__sinit_lock_release+0x8>)
 8003d1e:	f000 b8a2 	b.w	8003e66 <__retarget_lock_release_recursive>
 8003d22:	bf00      	nop
 8003d24:	2000019e 	.word	0x2000019e

08003d28 <__sinit>:
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	f7ff fff0 	bl	8003d10 <__sinit_lock_acquire>
 8003d30:	69a3      	ldr	r3, [r4, #24]
 8003d32:	b11b      	cbz	r3, 8003d3c <__sinit+0x14>
 8003d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d38:	f7ff bff0 	b.w	8003d1c <__sinit_lock_release>
 8003d3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d40:	6523      	str	r3, [r4, #80]	; 0x50
 8003d42:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <__sinit+0x68>)
 8003d44:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <__sinit+0x6c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d4a:	42a3      	cmp	r3, r4
 8003d4c:	bf08      	it	eq
 8003d4e:	2301      	moveq	r3, #1
 8003d50:	4620      	mov	r0, r4
 8003d52:	bf08      	it	eq
 8003d54:	61a3      	streq	r3, [r4, #24]
 8003d56:	f000 f81f 	bl	8003d98 <__sfp>
 8003d5a:	6060      	str	r0, [r4, #4]
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f000 f81b 	bl	8003d98 <__sfp>
 8003d62:	60a0      	str	r0, [r4, #8]
 8003d64:	4620      	mov	r0, r4
 8003d66:	f000 f817 	bl	8003d98 <__sfp>
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2104      	movs	r1, #4
 8003d6e:	60e0      	str	r0, [r4, #12]
 8003d70:	6860      	ldr	r0, [r4, #4]
 8003d72:	f7ff ff81 	bl	8003c78 <std>
 8003d76:	2201      	movs	r2, #1
 8003d78:	2109      	movs	r1, #9
 8003d7a:	68a0      	ldr	r0, [r4, #8]
 8003d7c:	f7ff ff7c 	bl	8003c78 <std>
 8003d80:	2202      	movs	r2, #2
 8003d82:	2112      	movs	r1, #18
 8003d84:	68e0      	ldr	r0, [r4, #12]
 8003d86:	f7ff ff77 	bl	8003c78 <std>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61a3      	str	r3, [r4, #24]
 8003d8e:	e7d1      	b.n	8003d34 <__sinit+0xc>
 8003d90:	0800493c 	.word	0x0800493c
 8003d94:	08003cc1 	.word	0x08003cc1

08003d98 <__sfp>:
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9a:	4607      	mov	r7, r0
 8003d9c:	f7ff ffac 	bl	8003cf8 <__sfp_lock_acquire>
 8003da0:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <__sfp+0x84>)
 8003da2:	681e      	ldr	r6, [r3, #0]
 8003da4:	69b3      	ldr	r3, [r6, #24]
 8003da6:	b913      	cbnz	r3, 8003dae <__sfp+0x16>
 8003da8:	4630      	mov	r0, r6
 8003daa:	f7ff ffbd 	bl	8003d28 <__sinit>
 8003dae:	3648      	adds	r6, #72	; 0x48
 8003db0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	d503      	bpl.n	8003dc0 <__sfp+0x28>
 8003db8:	6833      	ldr	r3, [r6, #0]
 8003dba:	b30b      	cbz	r3, 8003e00 <__sfp+0x68>
 8003dbc:	6836      	ldr	r6, [r6, #0]
 8003dbe:	e7f7      	b.n	8003db0 <__sfp+0x18>
 8003dc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003dc4:	b9d5      	cbnz	r5, 8003dfc <__sfp+0x64>
 8003dc6:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <__sfp+0x88>)
 8003dc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003dcc:	60e3      	str	r3, [r4, #12]
 8003dce:	6665      	str	r5, [r4, #100]	; 0x64
 8003dd0:	f000 f847 	bl	8003e62 <__retarget_lock_init_recursive>
 8003dd4:	f7ff ff96 	bl	8003d04 <__sfp_lock_release>
 8003dd8:	2208      	movs	r2, #8
 8003dda:	4629      	mov	r1, r5
 8003ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003de4:	6025      	str	r5, [r4, #0]
 8003de6:	61a5      	str	r5, [r4, #24]
 8003de8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003dec:	f7ff fcaa 	bl	8003744 <memset>
 8003df0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003df4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003df8:	4620      	mov	r0, r4
 8003dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dfc:	3468      	adds	r4, #104	; 0x68
 8003dfe:	e7d9      	b.n	8003db4 <__sfp+0x1c>
 8003e00:	2104      	movs	r1, #4
 8003e02:	4638      	mov	r0, r7
 8003e04:	f7ff ff62 	bl	8003ccc <__sfmoreglue>
 8003e08:	4604      	mov	r4, r0
 8003e0a:	6030      	str	r0, [r6, #0]
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d1d5      	bne.n	8003dbc <__sfp+0x24>
 8003e10:	f7ff ff78 	bl	8003d04 <__sfp_lock_release>
 8003e14:	230c      	movs	r3, #12
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	e7ee      	b.n	8003df8 <__sfp+0x60>
 8003e1a:	bf00      	nop
 8003e1c:	0800493c 	.word	0x0800493c
 8003e20:	ffff0001 	.word	0xffff0001

08003e24 <_fwalk_reent>:
 8003e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e28:	4606      	mov	r6, r0
 8003e2a:	4688      	mov	r8, r1
 8003e2c:	2700      	movs	r7, #0
 8003e2e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e36:	f1b9 0901 	subs.w	r9, r9, #1
 8003e3a:	d505      	bpl.n	8003e48 <_fwalk_reent+0x24>
 8003e3c:	6824      	ldr	r4, [r4, #0]
 8003e3e:	2c00      	cmp	r4, #0
 8003e40:	d1f7      	bne.n	8003e32 <_fwalk_reent+0xe>
 8003e42:	4638      	mov	r0, r7
 8003e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e48:	89ab      	ldrh	r3, [r5, #12]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d907      	bls.n	8003e5e <_fwalk_reent+0x3a>
 8003e4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e52:	3301      	adds	r3, #1
 8003e54:	d003      	beq.n	8003e5e <_fwalk_reent+0x3a>
 8003e56:	4629      	mov	r1, r5
 8003e58:	4630      	mov	r0, r6
 8003e5a:	47c0      	blx	r8
 8003e5c:	4307      	orrs	r7, r0
 8003e5e:	3568      	adds	r5, #104	; 0x68
 8003e60:	e7e9      	b.n	8003e36 <_fwalk_reent+0x12>

08003e62 <__retarget_lock_init_recursive>:
 8003e62:	4770      	bx	lr

08003e64 <__retarget_lock_acquire_recursive>:
 8003e64:	4770      	bx	lr

08003e66 <__retarget_lock_release_recursive>:
 8003e66:	4770      	bx	lr

08003e68 <__swhatbuf_r>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	460e      	mov	r6, r1
 8003e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e70:	4614      	mov	r4, r2
 8003e72:	2900      	cmp	r1, #0
 8003e74:	461d      	mov	r5, r3
 8003e76:	b096      	sub	sp, #88	; 0x58
 8003e78:	da08      	bge.n	8003e8c <__swhatbuf_r+0x24>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003e80:	602a      	str	r2, [r5, #0]
 8003e82:	061a      	lsls	r2, r3, #24
 8003e84:	d410      	bmi.n	8003ea8 <__swhatbuf_r+0x40>
 8003e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e8a:	e00e      	b.n	8003eaa <__swhatbuf_r+0x42>
 8003e8c:	466a      	mov	r2, sp
 8003e8e:	f000 fc91 	bl	80047b4 <_fstat_r>
 8003e92:	2800      	cmp	r0, #0
 8003e94:	dbf1      	blt.n	8003e7a <__swhatbuf_r+0x12>
 8003e96:	9a01      	ldr	r2, [sp, #4]
 8003e98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ea0:	425a      	negs	r2, r3
 8003ea2:	415a      	adcs	r2, r3
 8003ea4:	602a      	str	r2, [r5, #0]
 8003ea6:	e7ee      	b.n	8003e86 <__swhatbuf_r+0x1e>
 8003ea8:	2340      	movs	r3, #64	; 0x40
 8003eaa:	2000      	movs	r0, #0
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	b016      	add	sp, #88	; 0x58
 8003eb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003eb4 <__smakebuf_r>:
 8003eb4:	898b      	ldrh	r3, [r1, #12]
 8003eb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003eb8:	079d      	lsls	r5, r3, #30
 8003eba:	4606      	mov	r6, r0
 8003ebc:	460c      	mov	r4, r1
 8003ebe:	d507      	bpl.n	8003ed0 <__smakebuf_r+0x1c>
 8003ec0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	6123      	str	r3, [r4, #16]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	6163      	str	r3, [r4, #20]
 8003ecc:	b002      	add	sp, #8
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	466a      	mov	r2, sp
 8003ed2:	ab01      	add	r3, sp, #4
 8003ed4:	f7ff ffc8 	bl	8003e68 <__swhatbuf_r>
 8003ed8:	9900      	ldr	r1, [sp, #0]
 8003eda:	4605      	mov	r5, r0
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 f891 	bl	8004004 <_malloc_r>
 8003ee2:	b948      	cbnz	r0, 8003ef8 <__smakebuf_r+0x44>
 8003ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ee8:	059a      	lsls	r2, r3, #22
 8003eea:	d4ef      	bmi.n	8003ecc <__smakebuf_r+0x18>
 8003eec:	f023 0303 	bic.w	r3, r3, #3
 8003ef0:	f043 0302 	orr.w	r3, r3, #2
 8003ef4:	81a3      	strh	r3, [r4, #12]
 8003ef6:	e7e3      	b.n	8003ec0 <__smakebuf_r+0xc>
 8003ef8:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <__smakebuf_r+0x7c>)
 8003efa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	6020      	str	r0, [r4, #0]
 8003f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f04:	81a3      	strh	r3, [r4, #12]
 8003f06:	9b00      	ldr	r3, [sp, #0]
 8003f08:	6120      	str	r0, [r4, #16]
 8003f0a:	6163      	str	r3, [r4, #20]
 8003f0c:	9b01      	ldr	r3, [sp, #4]
 8003f0e:	b15b      	cbz	r3, 8003f28 <__smakebuf_r+0x74>
 8003f10:	4630      	mov	r0, r6
 8003f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f16:	f000 fc5f 	bl	80047d8 <_isatty_r>
 8003f1a:	b128      	cbz	r0, 8003f28 <__smakebuf_r+0x74>
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	89a0      	ldrh	r0, [r4, #12]
 8003f2a:	4305      	orrs	r5, r0
 8003f2c:	81a5      	strh	r5, [r4, #12]
 8003f2e:	e7cd      	b.n	8003ecc <__smakebuf_r+0x18>
 8003f30:	08003cc1 	.word	0x08003cc1

08003f34 <_free_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4605      	mov	r5, r0
 8003f38:	2900      	cmp	r1, #0
 8003f3a:	d040      	beq.n	8003fbe <_free_r+0x8a>
 8003f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f40:	1f0c      	subs	r4, r1, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bfb8      	it	lt
 8003f46:	18e4      	addlt	r4, r4, r3
 8003f48:	f000 fc76 	bl	8004838 <__malloc_lock>
 8003f4c:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <_free_r+0x8c>)
 8003f4e:	6813      	ldr	r3, [r2, #0]
 8003f50:	b933      	cbnz	r3, 8003f60 <_free_r+0x2c>
 8003f52:	6063      	str	r3, [r4, #4]
 8003f54:	6014      	str	r4, [r2, #0]
 8003f56:	4628      	mov	r0, r5
 8003f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f5c:	f000 bc72 	b.w	8004844 <__malloc_unlock>
 8003f60:	42a3      	cmp	r3, r4
 8003f62:	d908      	bls.n	8003f76 <_free_r+0x42>
 8003f64:	6820      	ldr	r0, [r4, #0]
 8003f66:	1821      	adds	r1, r4, r0
 8003f68:	428b      	cmp	r3, r1
 8003f6a:	bf01      	itttt	eq
 8003f6c:	6819      	ldreq	r1, [r3, #0]
 8003f6e:	685b      	ldreq	r3, [r3, #4]
 8003f70:	1809      	addeq	r1, r1, r0
 8003f72:	6021      	streq	r1, [r4, #0]
 8003f74:	e7ed      	b.n	8003f52 <_free_r+0x1e>
 8003f76:	461a      	mov	r2, r3
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	b10b      	cbz	r3, 8003f80 <_free_r+0x4c>
 8003f7c:	42a3      	cmp	r3, r4
 8003f7e:	d9fa      	bls.n	8003f76 <_free_r+0x42>
 8003f80:	6811      	ldr	r1, [r2, #0]
 8003f82:	1850      	adds	r0, r2, r1
 8003f84:	42a0      	cmp	r0, r4
 8003f86:	d10b      	bne.n	8003fa0 <_free_r+0x6c>
 8003f88:	6820      	ldr	r0, [r4, #0]
 8003f8a:	4401      	add	r1, r0
 8003f8c:	1850      	adds	r0, r2, r1
 8003f8e:	4283      	cmp	r3, r0
 8003f90:	6011      	str	r1, [r2, #0]
 8003f92:	d1e0      	bne.n	8003f56 <_free_r+0x22>
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	4401      	add	r1, r0
 8003f9a:	6011      	str	r1, [r2, #0]
 8003f9c:	6053      	str	r3, [r2, #4]
 8003f9e:	e7da      	b.n	8003f56 <_free_r+0x22>
 8003fa0:	d902      	bls.n	8003fa8 <_free_r+0x74>
 8003fa2:	230c      	movs	r3, #12
 8003fa4:	602b      	str	r3, [r5, #0]
 8003fa6:	e7d6      	b.n	8003f56 <_free_r+0x22>
 8003fa8:	6820      	ldr	r0, [r4, #0]
 8003faa:	1821      	adds	r1, r4, r0
 8003fac:	428b      	cmp	r3, r1
 8003fae:	bf01      	itttt	eq
 8003fb0:	6819      	ldreq	r1, [r3, #0]
 8003fb2:	685b      	ldreq	r3, [r3, #4]
 8003fb4:	1809      	addeq	r1, r1, r0
 8003fb6:	6021      	streq	r1, [r4, #0]
 8003fb8:	6063      	str	r3, [r4, #4]
 8003fba:	6054      	str	r4, [r2, #4]
 8003fbc:	e7cb      	b.n	8003f56 <_free_r+0x22>
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
 8003fc0:	200001a0 	.word	0x200001a0

08003fc4 <sbrk_aligned>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	4e0e      	ldr	r6, [pc, #56]	; (8004000 <sbrk_aligned+0x3c>)
 8003fc8:	460c      	mov	r4, r1
 8003fca:	6831      	ldr	r1, [r6, #0]
 8003fcc:	4605      	mov	r5, r0
 8003fce:	b911      	cbnz	r1, 8003fd6 <sbrk_aligned+0x12>
 8003fd0:	f000 fb7a 	bl	80046c8 <_sbrk_r>
 8003fd4:	6030      	str	r0, [r6, #0]
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	4628      	mov	r0, r5
 8003fda:	f000 fb75 	bl	80046c8 <_sbrk_r>
 8003fde:	1c43      	adds	r3, r0, #1
 8003fe0:	d00a      	beq.n	8003ff8 <sbrk_aligned+0x34>
 8003fe2:	1cc4      	adds	r4, r0, #3
 8003fe4:	f024 0403 	bic.w	r4, r4, #3
 8003fe8:	42a0      	cmp	r0, r4
 8003fea:	d007      	beq.n	8003ffc <sbrk_aligned+0x38>
 8003fec:	1a21      	subs	r1, r4, r0
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f000 fb6a 	bl	80046c8 <_sbrk_r>
 8003ff4:	3001      	adds	r0, #1
 8003ff6:	d101      	bne.n	8003ffc <sbrk_aligned+0x38>
 8003ff8:	f04f 34ff 	mov.w	r4, #4294967295
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	200001a4 	.word	0x200001a4

08004004 <_malloc_r>:
 8004004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004008:	1ccd      	adds	r5, r1, #3
 800400a:	f025 0503 	bic.w	r5, r5, #3
 800400e:	3508      	adds	r5, #8
 8004010:	2d0c      	cmp	r5, #12
 8004012:	bf38      	it	cc
 8004014:	250c      	movcc	r5, #12
 8004016:	2d00      	cmp	r5, #0
 8004018:	4607      	mov	r7, r0
 800401a:	db01      	blt.n	8004020 <_malloc_r+0x1c>
 800401c:	42a9      	cmp	r1, r5
 800401e:	d905      	bls.n	800402c <_malloc_r+0x28>
 8004020:	230c      	movs	r3, #12
 8004022:	2600      	movs	r6, #0
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	4630      	mov	r0, r6
 8004028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800402c:	4e2e      	ldr	r6, [pc, #184]	; (80040e8 <_malloc_r+0xe4>)
 800402e:	f000 fc03 	bl	8004838 <__malloc_lock>
 8004032:	6833      	ldr	r3, [r6, #0]
 8004034:	461c      	mov	r4, r3
 8004036:	bb34      	cbnz	r4, 8004086 <_malloc_r+0x82>
 8004038:	4629      	mov	r1, r5
 800403a:	4638      	mov	r0, r7
 800403c:	f7ff ffc2 	bl	8003fc4 <sbrk_aligned>
 8004040:	1c43      	adds	r3, r0, #1
 8004042:	4604      	mov	r4, r0
 8004044:	d14d      	bne.n	80040e2 <_malloc_r+0xde>
 8004046:	6834      	ldr	r4, [r6, #0]
 8004048:	4626      	mov	r6, r4
 800404a:	2e00      	cmp	r6, #0
 800404c:	d140      	bne.n	80040d0 <_malloc_r+0xcc>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	4631      	mov	r1, r6
 8004052:	4638      	mov	r0, r7
 8004054:	eb04 0803 	add.w	r8, r4, r3
 8004058:	f000 fb36 	bl	80046c8 <_sbrk_r>
 800405c:	4580      	cmp	r8, r0
 800405e:	d13a      	bne.n	80040d6 <_malloc_r+0xd2>
 8004060:	6821      	ldr	r1, [r4, #0]
 8004062:	3503      	adds	r5, #3
 8004064:	1a6d      	subs	r5, r5, r1
 8004066:	f025 0503 	bic.w	r5, r5, #3
 800406a:	3508      	adds	r5, #8
 800406c:	2d0c      	cmp	r5, #12
 800406e:	bf38      	it	cc
 8004070:	250c      	movcc	r5, #12
 8004072:	4638      	mov	r0, r7
 8004074:	4629      	mov	r1, r5
 8004076:	f7ff ffa5 	bl	8003fc4 <sbrk_aligned>
 800407a:	3001      	adds	r0, #1
 800407c:	d02b      	beq.n	80040d6 <_malloc_r+0xd2>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	442b      	add	r3, r5
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	e00e      	b.n	80040a4 <_malloc_r+0xa0>
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	1b52      	subs	r2, r2, r5
 800408a:	d41e      	bmi.n	80040ca <_malloc_r+0xc6>
 800408c:	2a0b      	cmp	r2, #11
 800408e:	d916      	bls.n	80040be <_malloc_r+0xba>
 8004090:	1961      	adds	r1, r4, r5
 8004092:	42a3      	cmp	r3, r4
 8004094:	6025      	str	r5, [r4, #0]
 8004096:	bf18      	it	ne
 8004098:	6059      	strne	r1, [r3, #4]
 800409a:	6863      	ldr	r3, [r4, #4]
 800409c:	bf08      	it	eq
 800409e:	6031      	streq	r1, [r6, #0]
 80040a0:	5162      	str	r2, [r4, r5]
 80040a2:	604b      	str	r3, [r1, #4]
 80040a4:	4638      	mov	r0, r7
 80040a6:	f104 060b 	add.w	r6, r4, #11
 80040aa:	f000 fbcb 	bl	8004844 <__malloc_unlock>
 80040ae:	f026 0607 	bic.w	r6, r6, #7
 80040b2:	1d23      	adds	r3, r4, #4
 80040b4:	1af2      	subs	r2, r6, r3
 80040b6:	d0b6      	beq.n	8004026 <_malloc_r+0x22>
 80040b8:	1b9b      	subs	r3, r3, r6
 80040ba:	50a3      	str	r3, [r4, r2]
 80040bc:	e7b3      	b.n	8004026 <_malloc_r+0x22>
 80040be:	6862      	ldr	r2, [r4, #4]
 80040c0:	42a3      	cmp	r3, r4
 80040c2:	bf0c      	ite	eq
 80040c4:	6032      	streq	r2, [r6, #0]
 80040c6:	605a      	strne	r2, [r3, #4]
 80040c8:	e7ec      	b.n	80040a4 <_malloc_r+0xa0>
 80040ca:	4623      	mov	r3, r4
 80040cc:	6864      	ldr	r4, [r4, #4]
 80040ce:	e7b2      	b.n	8004036 <_malloc_r+0x32>
 80040d0:	4634      	mov	r4, r6
 80040d2:	6876      	ldr	r6, [r6, #4]
 80040d4:	e7b9      	b.n	800404a <_malloc_r+0x46>
 80040d6:	230c      	movs	r3, #12
 80040d8:	4638      	mov	r0, r7
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	f000 fbb2 	bl	8004844 <__malloc_unlock>
 80040e0:	e7a1      	b.n	8004026 <_malloc_r+0x22>
 80040e2:	6025      	str	r5, [r4, #0]
 80040e4:	e7de      	b.n	80040a4 <_malloc_r+0xa0>
 80040e6:	bf00      	nop
 80040e8:	200001a0 	.word	0x200001a0

080040ec <__sfputc_r>:
 80040ec:	6893      	ldr	r3, [r2, #8]
 80040ee:	b410      	push	{r4}
 80040f0:	3b01      	subs	r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	6093      	str	r3, [r2, #8]
 80040f6:	da07      	bge.n	8004108 <__sfputc_r+0x1c>
 80040f8:	6994      	ldr	r4, [r2, #24]
 80040fa:	42a3      	cmp	r3, r4
 80040fc:	db01      	blt.n	8004102 <__sfputc_r+0x16>
 80040fe:	290a      	cmp	r1, #10
 8004100:	d102      	bne.n	8004108 <__sfputc_r+0x1c>
 8004102:	bc10      	pop	{r4}
 8004104:	f7ff bc3a 	b.w	800397c <__swbuf_r>
 8004108:	6813      	ldr	r3, [r2, #0]
 800410a:	1c58      	adds	r0, r3, #1
 800410c:	6010      	str	r0, [r2, #0]
 800410e:	7019      	strb	r1, [r3, #0]
 8004110:	4608      	mov	r0, r1
 8004112:	bc10      	pop	{r4}
 8004114:	4770      	bx	lr

08004116 <__sfputs_r>:
 8004116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004118:	4606      	mov	r6, r0
 800411a:	460f      	mov	r7, r1
 800411c:	4614      	mov	r4, r2
 800411e:	18d5      	adds	r5, r2, r3
 8004120:	42ac      	cmp	r4, r5
 8004122:	d101      	bne.n	8004128 <__sfputs_r+0x12>
 8004124:	2000      	movs	r0, #0
 8004126:	e007      	b.n	8004138 <__sfputs_r+0x22>
 8004128:	463a      	mov	r2, r7
 800412a:	4630      	mov	r0, r6
 800412c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004130:	f7ff ffdc 	bl	80040ec <__sfputc_r>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d1f3      	bne.n	8004120 <__sfputs_r+0xa>
 8004138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800413c <_vfiprintf_r>:
 800413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004140:	460d      	mov	r5, r1
 8004142:	4614      	mov	r4, r2
 8004144:	4698      	mov	r8, r3
 8004146:	4606      	mov	r6, r0
 8004148:	b09d      	sub	sp, #116	; 0x74
 800414a:	b118      	cbz	r0, 8004154 <_vfiprintf_r+0x18>
 800414c:	6983      	ldr	r3, [r0, #24]
 800414e:	b90b      	cbnz	r3, 8004154 <_vfiprintf_r+0x18>
 8004150:	f7ff fdea 	bl	8003d28 <__sinit>
 8004154:	4b89      	ldr	r3, [pc, #548]	; (800437c <_vfiprintf_r+0x240>)
 8004156:	429d      	cmp	r5, r3
 8004158:	d11b      	bne.n	8004192 <_vfiprintf_r+0x56>
 800415a:	6875      	ldr	r5, [r6, #4]
 800415c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800415e:	07d9      	lsls	r1, r3, #31
 8004160:	d405      	bmi.n	800416e <_vfiprintf_r+0x32>
 8004162:	89ab      	ldrh	r3, [r5, #12]
 8004164:	059a      	lsls	r2, r3, #22
 8004166:	d402      	bmi.n	800416e <_vfiprintf_r+0x32>
 8004168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800416a:	f7ff fe7b 	bl	8003e64 <__retarget_lock_acquire_recursive>
 800416e:	89ab      	ldrh	r3, [r5, #12]
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	d501      	bpl.n	8004178 <_vfiprintf_r+0x3c>
 8004174:	692b      	ldr	r3, [r5, #16]
 8004176:	b9eb      	cbnz	r3, 80041b4 <_vfiprintf_r+0x78>
 8004178:	4629      	mov	r1, r5
 800417a:	4630      	mov	r0, r6
 800417c:	f7ff fc50 	bl	8003a20 <__swsetup_r>
 8004180:	b1c0      	cbz	r0, 80041b4 <_vfiprintf_r+0x78>
 8004182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004184:	07dc      	lsls	r4, r3, #31
 8004186:	d50e      	bpl.n	80041a6 <_vfiprintf_r+0x6a>
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	b01d      	add	sp, #116	; 0x74
 800418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004192:	4b7b      	ldr	r3, [pc, #492]	; (8004380 <_vfiprintf_r+0x244>)
 8004194:	429d      	cmp	r5, r3
 8004196:	d101      	bne.n	800419c <_vfiprintf_r+0x60>
 8004198:	68b5      	ldr	r5, [r6, #8]
 800419a:	e7df      	b.n	800415c <_vfiprintf_r+0x20>
 800419c:	4b79      	ldr	r3, [pc, #484]	; (8004384 <_vfiprintf_r+0x248>)
 800419e:	429d      	cmp	r5, r3
 80041a0:	bf08      	it	eq
 80041a2:	68f5      	ldreq	r5, [r6, #12]
 80041a4:	e7da      	b.n	800415c <_vfiprintf_r+0x20>
 80041a6:	89ab      	ldrh	r3, [r5, #12]
 80041a8:	0598      	lsls	r0, r3, #22
 80041aa:	d4ed      	bmi.n	8004188 <_vfiprintf_r+0x4c>
 80041ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041ae:	f7ff fe5a 	bl	8003e66 <__retarget_lock_release_recursive>
 80041b2:	e7e9      	b.n	8004188 <_vfiprintf_r+0x4c>
 80041b4:	2300      	movs	r3, #0
 80041b6:	9309      	str	r3, [sp, #36]	; 0x24
 80041b8:	2320      	movs	r3, #32
 80041ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041be:	2330      	movs	r3, #48	; 0x30
 80041c0:	f04f 0901 	mov.w	r9, #1
 80041c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80041c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004388 <_vfiprintf_r+0x24c>
 80041cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041d0:	4623      	mov	r3, r4
 80041d2:	469a      	mov	sl, r3
 80041d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041d8:	b10a      	cbz	r2, 80041de <_vfiprintf_r+0xa2>
 80041da:	2a25      	cmp	r2, #37	; 0x25
 80041dc:	d1f9      	bne.n	80041d2 <_vfiprintf_r+0x96>
 80041de:	ebba 0b04 	subs.w	fp, sl, r4
 80041e2:	d00b      	beq.n	80041fc <_vfiprintf_r+0xc0>
 80041e4:	465b      	mov	r3, fp
 80041e6:	4622      	mov	r2, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	4630      	mov	r0, r6
 80041ec:	f7ff ff93 	bl	8004116 <__sfputs_r>
 80041f0:	3001      	adds	r0, #1
 80041f2:	f000 80aa 	beq.w	800434a <_vfiprintf_r+0x20e>
 80041f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041f8:	445a      	add	r2, fp
 80041fa:	9209      	str	r2, [sp, #36]	; 0x24
 80041fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 80a2 	beq.w	800434a <_vfiprintf_r+0x20e>
 8004206:	2300      	movs	r3, #0
 8004208:	f04f 32ff 	mov.w	r2, #4294967295
 800420c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004210:	f10a 0a01 	add.w	sl, sl, #1
 8004214:	9304      	str	r3, [sp, #16]
 8004216:	9307      	str	r3, [sp, #28]
 8004218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800421c:	931a      	str	r3, [sp, #104]	; 0x68
 800421e:	4654      	mov	r4, sl
 8004220:	2205      	movs	r2, #5
 8004222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004226:	4858      	ldr	r0, [pc, #352]	; (8004388 <_vfiprintf_r+0x24c>)
 8004228:	f000 faf8 	bl	800481c <memchr>
 800422c:	9a04      	ldr	r2, [sp, #16]
 800422e:	b9d8      	cbnz	r0, 8004268 <_vfiprintf_r+0x12c>
 8004230:	06d1      	lsls	r1, r2, #27
 8004232:	bf44      	itt	mi
 8004234:	2320      	movmi	r3, #32
 8004236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800423a:	0713      	lsls	r3, r2, #28
 800423c:	bf44      	itt	mi
 800423e:	232b      	movmi	r3, #43	; 0x2b
 8004240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004244:	f89a 3000 	ldrb.w	r3, [sl]
 8004248:	2b2a      	cmp	r3, #42	; 0x2a
 800424a:	d015      	beq.n	8004278 <_vfiprintf_r+0x13c>
 800424c:	4654      	mov	r4, sl
 800424e:	2000      	movs	r0, #0
 8004250:	f04f 0c0a 	mov.w	ip, #10
 8004254:	9a07      	ldr	r2, [sp, #28]
 8004256:	4621      	mov	r1, r4
 8004258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800425c:	3b30      	subs	r3, #48	; 0x30
 800425e:	2b09      	cmp	r3, #9
 8004260:	d94e      	bls.n	8004300 <_vfiprintf_r+0x1c4>
 8004262:	b1b0      	cbz	r0, 8004292 <_vfiprintf_r+0x156>
 8004264:	9207      	str	r2, [sp, #28]
 8004266:	e014      	b.n	8004292 <_vfiprintf_r+0x156>
 8004268:	eba0 0308 	sub.w	r3, r0, r8
 800426c:	fa09 f303 	lsl.w	r3, r9, r3
 8004270:	4313      	orrs	r3, r2
 8004272:	46a2      	mov	sl, r4
 8004274:	9304      	str	r3, [sp, #16]
 8004276:	e7d2      	b.n	800421e <_vfiprintf_r+0xe2>
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	1d19      	adds	r1, r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	9103      	str	r1, [sp, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	bfbb      	ittet	lt
 8004284:	425b      	neglt	r3, r3
 8004286:	f042 0202 	orrlt.w	r2, r2, #2
 800428a:	9307      	strge	r3, [sp, #28]
 800428c:	9307      	strlt	r3, [sp, #28]
 800428e:	bfb8      	it	lt
 8004290:	9204      	strlt	r2, [sp, #16]
 8004292:	7823      	ldrb	r3, [r4, #0]
 8004294:	2b2e      	cmp	r3, #46	; 0x2e
 8004296:	d10c      	bne.n	80042b2 <_vfiprintf_r+0x176>
 8004298:	7863      	ldrb	r3, [r4, #1]
 800429a:	2b2a      	cmp	r3, #42	; 0x2a
 800429c:	d135      	bne.n	800430a <_vfiprintf_r+0x1ce>
 800429e:	9b03      	ldr	r3, [sp, #12]
 80042a0:	3402      	adds	r4, #2
 80042a2:	1d1a      	adds	r2, r3, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	9203      	str	r2, [sp, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bfb8      	it	lt
 80042ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80042b0:	9305      	str	r3, [sp, #20]
 80042b2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800438c <_vfiprintf_r+0x250>
 80042b6:	2203      	movs	r2, #3
 80042b8:	4650      	mov	r0, sl
 80042ba:	7821      	ldrb	r1, [r4, #0]
 80042bc:	f000 faae 	bl	800481c <memchr>
 80042c0:	b140      	cbz	r0, 80042d4 <_vfiprintf_r+0x198>
 80042c2:	2340      	movs	r3, #64	; 0x40
 80042c4:	eba0 000a 	sub.w	r0, r0, sl
 80042c8:	fa03 f000 	lsl.w	r0, r3, r0
 80042cc:	9b04      	ldr	r3, [sp, #16]
 80042ce:	3401      	adds	r4, #1
 80042d0:	4303      	orrs	r3, r0
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d8:	2206      	movs	r2, #6
 80042da:	482d      	ldr	r0, [pc, #180]	; (8004390 <_vfiprintf_r+0x254>)
 80042dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042e0:	f000 fa9c 	bl	800481c <memchr>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	d03f      	beq.n	8004368 <_vfiprintf_r+0x22c>
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <_vfiprintf_r+0x258>)
 80042ea:	bb1b      	cbnz	r3, 8004334 <_vfiprintf_r+0x1f8>
 80042ec:	9b03      	ldr	r3, [sp, #12]
 80042ee:	3307      	adds	r3, #7
 80042f0:	f023 0307 	bic.w	r3, r3, #7
 80042f4:	3308      	adds	r3, #8
 80042f6:	9303      	str	r3, [sp, #12]
 80042f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042fa:	443b      	add	r3, r7
 80042fc:	9309      	str	r3, [sp, #36]	; 0x24
 80042fe:	e767      	b.n	80041d0 <_vfiprintf_r+0x94>
 8004300:	460c      	mov	r4, r1
 8004302:	2001      	movs	r0, #1
 8004304:	fb0c 3202 	mla	r2, ip, r2, r3
 8004308:	e7a5      	b.n	8004256 <_vfiprintf_r+0x11a>
 800430a:	2300      	movs	r3, #0
 800430c:	f04f 0c0a 	mov.w	ip, #10
 8004310:	4619      	mov	r1, r3
 8004312:	3401      	adds	r4, #1
 8004314:	9305      	str	r3, [sp, #20]
 8004316:	4620      	mov	r0, r4
 8004318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800431c:	3a30      	subs	r2, #48	; 0x30
 800431e:	2a09      	cmp	r2, #9
 8004320:	d903      	bls.n	800432a <_vfiprintf_r+0x1ee>
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0c5      	beq.n	80042b2 <_vfiprintf_r+0x176>
 8004326:	9105      	str	r1, [sp, #20]
 8004328:	e7c3      	b.n	80042b2 <_vfiprintf_r+0x176>
 800432a:	4604      	mov	r4, r0
 800432c:	2301      	movs	r3, #1
 800432e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004332:	e7f0      	b.n	8004316 <_vfiprintf_r+0x1da>
 8004334:	ab03      	add	r3, sp, #12
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	462a      	mov	r2, r5
 800433a:	4630      	mov	r0, r6
 800433c:	4b16      	ldr	r3, [pc, #88]	; (8004398 <_vfiprintf_r+0x25c>)
 800433e:	a904      	add	r1, sp, #16
 8004340:	f3af 8000 	nop.w
 8004344:	4607      	mov	r7, r0
 8004346:	1c78      	adds	r0, r7, #1
 8004348:	d1d6      	bne.n	80042f8 <_vfiprintf_r+0x1bc>
 800434a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800434c:	07d9      	lsls	r1, r3, #31
 800434e:	d405      	bmi.n	800435c <_vfiprintf_r+0x220>
 8004350:	89ab      	ldrh	r3, [r5, #12]
 8004352:	059a      	lsls	r2, r3, #22
 8004354:	d402      	bmi.n	800435c <_vfiprintf_r+0x220>
 8004356:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004358:	f7ff fd85 	bl	8003e66 <__retarget_lock_release_recursive>
 800435c:	89ab      	ldrh	r3, [r5, #12]
 800435e:	065b      	lsls	r3, r3, #25
 8004360:	f53f af12 	bmi.w	8004188 <_vfiprintf_r+0x4c>
 8004364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004366:	e711      	b.n	800418c <_vfiprintf_r+0x50>
 8004368:	ab03      	add	r3, sp, #12
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	462a      	mov	r2, r5
 800436e:	4630      	mov	r0, r6
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <_vfiprintf_r+0x25c>)
 8004372:	a904      	add	r1, sp, #16
 8004374:	f000 f882 	bl	800447c <_printf_i>
 8004378:	e7e4      	b.n	8004344 <_vfiprintf_r+0x208>
 800437a:	bf00      	nop
 800437c:	08004a64 	.word	0x08004a64
 8004380:	08004a84 	.word	0x08004a84
 8004384:	08004a44 	.word	0x08004a44
 8004388:	08004aa4 	.word	0x08004aa4
 800438c:	08004aaa 	.word	0x08004aaa
 8004390:	08004aae 	.word	0x08004aae
 8004394:	00000000 	.word	0x00000000
 8004398:	08004117 	.word	0x08004117

0800439c <_printf_common>:
 800439c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a0:	4616      	mov	r6, r2
 80043a2:	4699      	mov	r9, r3
 80043a4:	688a      	ldr	r2, [r1, #8]
 80043a6:	690b      	ldr	r3, [r1, #16]
 80043a8:	4607      	mov	r7, r0
 80043aa:	4293      	cmp	r3, r2
 80043ac:	bfb8      	it	lt
 80043ae:	4613      	movlt	r3, r2
 80043b0:	6033      	str	r3, [r6, #0]
 80043b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043b6:	460c      	mov	r4, r1
 80043b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043bc:	b10a      	cbz	r2, 80043c2 <_printf_common+0x26>
 80043be:	3301      	adds	r3, #1
 80043c0:	6033      	str	r3, [r6, #0]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	0699      	lsls	r1, r3, #26
 80043c6:	bf42      	ittt	mi
 80043c8:	6833      	ldrmi	r3, [r6, #0]
 80043ca:	3302      	addmi	r3, #2
 80043cc:	6033      	strmi	r3, [r6, #0]
 80043ce:	6825      	ldr	r5, [r4, #0]
 80043d0:	f015 0506 	ands.w	r5, r5, #6
 80043d4:	d106      	bne.n	80043e4 <_printf_common+0x48>
 80043d6:	f104 0a19 	add.w	sl, r4, #25
 80043da:	68e3      	ldr	r3, [r4, #12]
 80043dc:	6832      	ldr	r2, [r6, #0]
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	42ab      	cmp	r3, r5
 80043e2:	dc28      	bgt.n	8004436 <_printf_common+0x9a>
 80043e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043e8:	1e13      	subs	r3, r2, #0
 80043ea:	6822      	ldr	r2, [r4, #0]
 80043ec:	bf18      	it	ne
 80043ee:	2301      	movne	r3, #1
 80043f0:	0692      	lsls	r2, r2, #26
 80043f2:	d42d      	bmi.n	8004450 <_printf_common+0xb4>
 80043f4:	4649      	mov	r1, r9
 80043f6:	4638      	mov	r0, r7
 80043f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043fc:	47c0      	blx	r8
 80043fe:	3001      	adds	r0, #1
 8004400:	d020      	beq.n	8004444 <_printf_common+0xa8>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	68e5      	ldr	r5, [r4, #12]
 8004406:	f003 0306 	and.w	r3, r3, #6
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf18      	it	ne
 800440e:	2500      	movne	r5, #0
 8004410:	6832      	ldr	r2, [r6, #0]
 8004412:	f04f 0600 	mov.w	r6, #0
 8004416:	68a3      	ldr	r3, [r4, #8]
 8004418:	bf08      	it	eq
 800441a:	1aad      	subeq	r5, r5, r2
 800441c:	6922      	ldr	r2, [r4, #16]
 800441e:	bf08      	it	eq
 8004420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004424:	4293      	cmp	r3, r2
 8004426:	bfc4      	itt	gt
 8004428:	1a9b      	subgt	r3, r3, r2
 800442a:	18ed      	addgt	r5, r5, r3
 800442c:	341a      	adds	r4, #26
 800442e:	42b5      	cmp	r5, r6
 8004430:	d11a      	bne.n	8004468 <_printf_common+0xcc>
 8004432:	2000      	movs	r0, #0
 8004434:	e008      	b.n	8004448 <_printf_common+0xac>
 8004436:	2301      	movs	r3, #1
 8004438:	4652      	mov	r2, sl
 800443a:	4649      	mov	r1, r9
 800443c:	4638      	mov	r0, r7
 800443e:	47c0      	blx	r8
 8004440:	3001      	adds	r0, #1
 8004442:	d103      	bne.n	800444c <_printf_common+0xb0>
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444c:	3501      	adds	r5, #1
 800444e:	e7c4      	b.n	80043da <_printf_common+0x3e>
 8004450:	2030      	movs	r0, #48	; 0x30
 8004452:	18e1      	adds	r1, r4, r3
 8004454:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800445e:	4422      	add	r2, r4
 8004460:	3302      	adds	r3, #2
 8004462:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004466:	e7c5      	b.n	80043f4 <_printf_common+0x58>
 8004468:	2301      	movs	r3, #1
 800446a:	4622      	mov	r2, r4
 800446c:	4649      	mov	r1, r9
 800446e:	4638      	mov	r0, r7
 8004470:	47c0      	blx	r8
 8004472:	3001      	adds	r0, #1
 8004474:	d0e6      	beq.n	8004444 <_printf_common+0xa8>
 8004476:	3601      	adds	r6, #1
 8004478:	e7d9      	b.n	800442e <_printf_common+0x92>
	...

0800447c <_printf_i>:
 800447c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	7e0f      	ldrb	r7, [r1, #24]
 8004482:	4691      	mov	r9, r2
 8004484:	2f78      	cmp	r7, #120	; 0x78
 8004486:	4680      	mov	r8, r0
 8004488:	460c      	mov	r4, r1
 800448a:	469a      	mov	sl, r3
 800448c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800448e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004492:	d807      	bhi.n	80044a4 <_printf_i+0x28>
 8004494:	2f62      	cmp	r7, #98	; 0x62
 8004496:	d80a      	bhi.n	80044ae <_printf_i+0x32>
 8004498:	2f00      	cmp	r7, #0
 800449a:	f000 80d9 	beq.w	8004650 <_printf_i+0x1d4>
 800449e:	2f58      	cmp	r7, #88	; 0x58
 80044a0:	f000 80a4 	beq.w	80045ec <_printf_i+0x170>
 80044a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044ac:	e03a      	b.n	8004524 <_printf_i+0xa8>
 80044ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044b2:	2b15      	cmp	r3, #21
 80044b4:	d8f6      	bhi.n	80044a4 <_printf_i+0x28>
 80044b6:	a101      	add	r1, pc, #4	; (adr r1, 80044bc <_printf_i+0x40>)
 80044b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044bc:	08004515 	.word	0x08004515
 80044c0:	08004529 	.word	0x08004529
 80044c4:	080044a5 	.word	0x080044a5
 80044c8:	080044a5 	.word	0x080044a5
 80044cc:	080044a5 	.word	0x080044a5
 80044d0:	080044a5 	.word	0x080044a5
 80044d4:	08004529 	.word	0x08004529
 80044d8:	080044a5 	.word	0x080044a5
 80044dc:	080044a5 	.word	0x080044a5
 80044e0:	080044a5 	.word	0x080044a5
 80044e4:	080044a5 	.word	0x080044a5
 80044e8:	08004637 	.word	0x08004637
 80044ec:	08004559 	.word	0x08004559
 80044f0:	08004619 	.word	0x08004619
 80044f4:	080044a5 	.word	0x080044a5
 80044f8:	080044a5 	.word	0x080044a5
 80044fc:	08004659 	.word	0x08004659
 8004500:	080044a5 	.word	0x080044a5
 8004504:	08004559 	.word	0x08004559
 8004508:	080044a5 	.word	0x080044a5
 800450c:	080044a5 	.word	0x080044a5
 8004510:	08004621 	.word	0x08004621
 8004514:	682b      	ldr	r3, [r5, #0]
 8004516:	1d1a      	adds	r2, r3, #4
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	602a      	str	r2, [r5, #0]
 800451c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004524:	2301      	movs	r3, #1
 8004526:	e0a4      	b.n	8004672 <_printf_i+0x1f6>
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	6829      	ldr	r1, [r5, #0]
 800452c:	0606      	lsls	r6, r0, #24
 800452e:	f101 0304 	add.w	r3, r1, #4
 8004532:	d50a      	bpl.n	800454a <_printf_i+0xce>
 8004534:	680e      	ldr	r6, [r1, #0]
 8004536:	602b      	str	r3, [r5, #0]
 8004538:	2e00      	cmp	r6, #0
 800453a:	da03      	bge.n	8004544 <_printf_i+0xc8>
 800453c:	232d      	movs	r3, #45	; 0x2d
 800453e:	4276      	negs	r6, r6
 8004540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004544:	230a      	movs	r3, #10
 8004546:	485e      	ldr	r0, [pc, #376]	; (80046c0 <_printf_i+0x244>)
 8004548:	e019      	b.n	800457e <_printf_i+0x102>
 800454a:	680e      	ldr	r6, [r1, #0]
 800454c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004550:	602b      	str	r3, [r5, #0]
 8004552:	bf18      	it	ne
 8004554:	b236      	sxthne	r6, r6
 8004556:	e7ef      	b.n	8004538 <_printf_i+0xbc>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	1d19      	adds	r1, r3, #4
 800455e:	6029      	str	r1, [r5, #0]
 8004560:	0601      	lsls	r1, r0, #24
 8004562:	d501      	bpl.n	8004568 <_printf_i+0xec>
 8004564:	681e      	ldr	r6, [r3, #0]
 8004566:	e002      	b.n	800456e <_printf_i+0xf2>
 8004568:	0646      	lsls	r6, r0, #25
 800456a:	d5fb      	bpl.n	8004564 <_printf_i+0xe8>
 800456c:	881e      	ldrh	r6, [r3, #0]
 800456e:	2f6f      	cmp	r7, #111	; 0x6f
 8004570:	bf0c      	ite	eq
 8004572:	2308      	moveq	r3, #8
 8004574:	230a      	movne	r3, #10
 8004576:	4852      	ldr	r0, [pc, #328]	; (80046c0 <_printf_i+0x244>)
 8004578:	2100      	movs	r1, #0
 800457a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800457e:	6865      	ldr	r5, [r4, #4]
 8004580:	2d00      	cmp	r5, #0
 8004582:	bfa8      	it	ge
 8004584:	6821      	ldrge	r1, [r4, #0]
 8004586:	60a5      	str	r5, [r4, #8]
 8004588:	bfa4      	itt	ge
 800458a:	f021 0104 	bicge.w	r1, r1, #4
 800458e:	6021      	strge	r1, [r4, #0]
 8004590:	b90e      	cbnz	r6, 8004596 <_printf_i+0x11a>
 8004592:	2d00      	cmp	r5, #0
 8004594:	d04d      	beq.n	8004632 <_printf_i+0x1b6>
 8004596:	4615      	mov	r5, r2
 8004598:	fbb6 f1f3 	udiv	r1, r6, r3
 800459c:	fb03 6711 	mls	r7, r3, r1, r6
 80045a0:	5dc7      	ldrb	r7, [r0, r7]
 80045a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045a6:	4637      	mov	r7, r6
 80045a8:	42bb      	cmp	r3, r7
 80045aa:	460e      	mov	r6, r1
 80045ac:	d9f4      	bls.n	8004598 <_printf_i+0x11c>
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d10b      	bne.n	80045ca <_printf_i+0x14e>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	07de      	lsls	r6, r3, #31
 80045b6:	d508      	bpl.n	80045ca <_printf_i+0x14e>
 80045b8:	6923      	ldr	r3, [r4, #16]
 80045ba:	6861      	ldr	r1, [r4, #4]
 80045bc:	4299      	cmp	r1, r3
 80045be:	bfde      	ittt	le
 80045c0:	2330      	movle	r3, #48	; 0x30
 80045c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045ca:	1b52      	subs	r2, r2, r5
 80045cc:	6122      	str	r2, [r4, #16]
 80045ce:	464b      	mov	r3, r9
 80045d0:	4621      	mov	r1, r4
 80045d2:	4640      	mov	r0, r8
 80045d4:	f8cd a000 	str.w	sl, [sp]
 80045d8:	aa03      	add	r2, sp, #12
 80045da:	f7ff fedf 	bl	800439c <_printf_common>
 80045de:	3001      	adds	r0, #1
 80045e0:	d14c      	bne.n	800467c <_printf_i+0x200>
 80045e2:	f04f 30ff 	mov.w	r0, #4294967295
 80045e6:	b004      	add	sp, #16
 80045e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ec:	4834      	ldr	r0, [pc, #208]	; (80046c0 <_printf_i+0x244>)
 80045ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045f2:	6829      	ldr	r1, [r5, #0]
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80045fa:	6029      	str	r1, [r5, #0]
 80045fc:	061d      	lsls	r5, r3, #24
 80045fe:	d514      	bpl.n	800462a <_printf_i+0x1ae>
 8004600:	07df      	lsls	r7, r3, #31
 8004602:	bf44      	itt	mi
 8004604:	f043 0320 	orrmi.w	r3, r3, #32
 8004608:	6023      	strmi	r3, [r4, #0]
 800460a:	b91e      	cbnz	r6, 8004614 <_printf_i+0x198>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	f023 0320 	bic.w	r3, r3, #32
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	2310      	movs	r3, #16
 8004616:	e7af      	b.n	8004578 <_printf_i+0xfc>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	f043 0320 	orr.w	r3, r3, #32
 800461e:	6023      	str	r3, [r4, #0]
 8004620:	2378      	movs	r3, #120	; 0x78
 8004622:	4828      	ldr	r0, [pc, #160]	; (80046c4 <_printf_i+0x248>)
 8004624:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004628:	e7e3      	b.n	80045f2 <_printf_i+0x176>
 800462a:	0659      	lsls	r1, r3, #25
 800462c:	bf48      	it	mi
 800462e:	b2b6      	uxthmi	r6, r6
 8004630:	e7e6      	b.n	8004600 <_printf_i+0x184>
 8004632:	4615      	mov	r5, r2
 8004634:	e7bb      	b.n	80045ae <_printf_i+0x132>
 8004636:	682b      	ldr	r3, [r5, #0]
 8004638:	6826      	ldr	r6, [r4, #0]
 800463a:	1d18      	adds	r0, r3, #4
 800463c:	6961      	ldr	r1, [r4, #20]
 800463e:	6028      	str	r0, [r5, #0]
 8004640:	0635      	lsls	r5, r6, #24
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	d501      	bpl.n	800464a <_printf_i+0x1ce>
 8004646:	6019      	str	r1, [r3, #0]
 8004648:	e002      	b.n	8004650 <_printf_i+0x1d4>
 800464a:	0670      	lsls	r0, r6, #25
 800464c:	d5fb      	bpl.n	8004646 <_printf_i+0x1ca>
 800464e:	8019      	strh	r1, [r3, #0]
 8004650:	2300      	movs	r3, #0
 8004652:	4615      	mov	r5, r2
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	e7ba      	b.n	80045ce <_printf_i+0x152>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	2100      	movs	r1, #0
 800465c:	1d1a      	adds	r2, r3, #4
 800465e:	602a      	str	r2, [r5, #0]
 8004660:	681d      	ldr	r5, [r3, #0]
 8004662:	6862      	ldr	r2, [r4, #4]
 8004664:	4628      	mov	r0, r5
 8004666:	f000 f8d9 	bl	800481c <memchr>
 800466a:	b108      	cbz	r0, 8004670 <_printf_i+0x1f4>
 800466c:	1b40      	subs	r0, r0, r5
 800466e:	6060      	str	r0, [r4, #4]
 8004670:	6863      	ldr	r3, [r4, #4]
 8004672:	6123      	str	r3, [r4, #16]
 8004674:	2300      	movs	r3, #0
 8004676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800467a:	e7a8      	b.n	80045ce <_printf_i+0x152>
 800467c:	462a      	mov	r2, r5
 800467e:	4649      	mov	r1, r9
 8004680:	4640      	mov	r0, r8
 8004682:	6923      	ldr	r3, [r4, #16]
 8004684:	47d0      	blx	sl
 8004686:	3001      	adds	r0, #1
 8004688:	d0ab      	beq.n	80045e2 <_printf_i+0x166>
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	079b      	lsls	r3, r3, #30
 800468e:	d413      	bmi.n	80046b8 <_printf_i+0x23c>
 8004690:	68e0      	ldr	r0, [r4, #12]
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	4298      	cmp	r0, r3
 8004696:	bfb8      	it	lt
 8004698:	4618      	movlt	r0, r3
 800469a:	e7a4      	b.n	80045e6 <_printf_i+0x16a>
 800469c:	2301      	movs	r3, #1
 800469e:	4632      	mov	r2, r6
 80046a0:	4649      	mov	r1, r9
 80046a2:	4640      	mov	r0, r8
 80046a4:	47d0      	blx	sl
 80046a6:	3001      	adds	r0, #1
 80046a8:	d09b      	beq.n	80045e2 <_printf_i+0x166>
 80046aa:	3501      	adds	r5, #1
 80046ac:	68e3      	ldr	r3, [r4, #12]
 80046ae:	9903      	ldr	r1, [sp, #12]
 80046b0:	1a5b      	subs	r3, r3, r1
 80046b2:	42ab      	cmp	r3, r5
 80046b4:	dcf2      	bgt.n	800469c <_printf_i+0x220>
 80046b6:	e7eb      	b.n	8004690 <_printf_i+0x214>
 80046b8:	2500      	movs	r5, #0
 80046ba:	f104 0619 	add.w	r6, r4, #25
 80046be:	e7f5      	b.n	80046ac <_printf_i+0x230>
 80046c0:	08004ab5 	.word	0x08004ab5
 80046c4:	08004ac6 	.word	0x08004ac6

080046c8 <_sbrk_r>:
 80046c8:	b538      	push	{r3, r4, r5, lr}
 80046ca:	2300      	movs	r3, #0
 80046cc:	4d05      	ldr	r5, [pc, #20]	; (80046e4 <_sbrk_r+0x1c>)
 80046ce:	4604      	mov	r4, r0
 80046d0:	4608      	mov	r0, r1
 80046d2:	602b      	str	r3, [r5, #0]
 80046d4:	f7fc fa28 	bl	8000b28 <_sbrk>
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d102      	bne.n	80046e2 <_sbrk_r+0x1a>
 80046dc:	682b      	ldr	r3, [r5, #0]
 80046de:	b103      	cbz	r3, 80046e2 <_sbrk_r+0x1a>
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	bd38      	pop	{r3, r4, r5, pc}
 80046e4:	200001a8 	.word	0x200001a8

080046e8 <__sread>:
 80046e8:	b510      	push	{r4, lr}
 80046ea:	460c      	mov	r4, r1
 80046ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f0:	f000 f8ae 	bl	8004850 <_read_r>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	bfab      	itete	ge
 80046f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046fa:	89a3      	ldrhlt	r3, [r4, #12]
 80046fc:	181b      	addge	r3, r3, r0
 80046fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004702:	bfac      	ite	ge
 8004704:	6563      	strge	r3, [r4, #84]	; 0x54
 8004706:	81a3      	strhlt	r3, [r4, #12]
 8004708:	bd10      	pop	{r4, pc}

0800470a <__swrite>:
 800470a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800470e:	461f      	mov	r7, r3
 8004710:	898b      	ldrh	r3, [r1, #12]
 8004712:	4605      	mov	r5, r0
 8004714:	05db      	lsls	r3, r3, #23
 8004716:	460c      	mov	r4, r1
 8004718:	4616      	mov	r6, r2
 800471a:	d505      	bpl.n	8004728 <__swrite+0x1e>
 800471c:	2302      	movs	r3, #2
 800471e:	2200      	movs	r2, #0
 8004720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004724:	f000 f868 	bl	80047f8 <_lseek_r>
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	4632      	mov	r2, r6
 800472c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004730:	81a3      	strh	r3, [r4, #12]
 8004732:	4628      	mov	r0, r5
 8004734:	463b      	mov	r3, r7
 8004736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800473a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800473e:	f000 b817 	b.w	8004770 <_write_r>

08004742 <__sseek>:
 8004742:	b510      	push	{r4, lr}
 8004744:	460c      	mov	r4, r1
 8004746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474a:	f000 f855 	bl	80047f8 <_lseek_r>
 800474e:	1c43      	adds	r3, r0, #1
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	bf15      	itete	ne
 8004754:	6560      	strne	r0, [r4, #84]	; 0x54
 8004756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800475a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800475e:	81a3      	strheq	r3, [r4, #12]
 8004760:	bf18      	it	ne
 8004762:	81a3      	strhne	r3, [r4, #12]
 8004764:	bd10      	pop	{r4, pc}

08004766 <__sclose>:
 8004766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800476a:	f000 b813 	b.w	8004794 <_close_r>
	...

08004770 <_write_r>:
 8004770:	b538      	push	{r3, r4, r5, lr}
 8004772:	4604      	mov	r4, r0
 8004774:	4608      	mov	r0, r1
 8004776:	4611      	mov	r1, r2
 8004778:	2200      	movs	r2, #0
 800477a:	4d05      	ldr	r5, [pc, #20]	; (8004790 <_write_r+0x20>)
 800477c:	602a      	str	r2, [r5, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	f7fc f985 	bl	8000a8e <_write>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d102      	bne.n	800478e <_write_r+0x1e>
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	b103      	cbz	r3, 800478e <_write_r+0x1e>
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	bd38      	pop	{r3, r4, r5, pc}
 8004790:	200001a8 	.word	0x200001a8

08004794 <_close_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	2300      	movs	r3, #0
 8004798:	4d05      	ldr	r5, [pc, #20]	; (80047b0 <_close_r+0x1c>)
 800479a:	4604      	mov	r4, r0
 800479c:	4608      	mov	r0, r1
 800479e:	602b      	str	r3, [r5, #0]
 80047a0:	f7fc f991 	bl	8000ac6 <_close>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d102      	bne.n	80047ae <_close_r+0x1a>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	b103      	cbz	r3, 80047ae <_close_r+0x1a>
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	200001a8 	.word	0x200001a8

080047b4 <_fstat_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	2300      	movs	r3, #0
 80047b8:	4d06      	ldr	r5, [pc, #24]	; (80047d4 <_fstat_r+0x20>)
 80047ba:	4604      	mov	r4, r0
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	f7fc f98b 	bl	8000adc <_fstat>
 80047c6:	1c43      	adds	r3, r0, #1
 80047c8:	d102      	bne.n	80047d0 <_fstat_r+0x1c>
 80047ca:	682b      	ldr	r3, [r5, #0]
 80047cc:	b103      	cbz	r3, 80047d0 <_fstat_r+0x1c>
 80047ce:	6023      	str	r3, [r4, #0]
 80047d0:	bd38      	pop	{r3, r4, r5, pc}
 80047d2:	bf00      	nop
 80047d4:	200001a8 	.word	0x200001a8

080047d8 <_isatty_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	2300      	movs	r3, #0
 80047dc:	4d05      	ldr	r5, [pc, #20]	; (80047f4 <_isatty_r+0x1c>)
 80047de:	4604      	mov	r4, r0
 80047e0:	4608      	mov	r0, r1
 80047e2:	602b      	str	r3, [r5, #0]
 80047e4:	f7fc f989 	bl	8000afa <_isatty>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d102      	bne.n	80047f2 <_isatty_r+0x1a>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	b103      	cbz	r3, 80047f2 <_isatty_r+0x1a>
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	bd38      	pop	{r3, r4, r5, pc}
 80047f4:	200001a8 	.word	0x200001a8

080047f8 <_lseek_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4604      	mov	r4, r0
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	2200      	movs	r2, #0
 8004802:	4d05      	ldr	r5, [pc, #20]	; (8004818 <_lseek_r+0x20>)
 8004804:	602a      	str	r2, [r5, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	f7fc f981 	bl	8000b0e <_lseek>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d102      	bne.n	8004816 <_lseek_r+0x1e>
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	b103      	cbz	r3, 8004816 <_lseek_r+0x1e>
 8004814:	6023      	str	r3, [r4, #0]
 8004816:	bd38      	pop	{r3, r4, r5, pc}
 8004818:	200001a8 	.word	0x200001a8

0800481c <memchr>:
 800481c:	4603      	mov	r3, r0
 800481e:	b510      	push	{r4, lr}
 8004820:	b2c9      	uxtb	r1, r1
 8004822:	4402      	add	r2, r0
 8004824:	4293      	cmp	r3, r2
 8004826:	4618      	mov	r0, r3
 8004828:	d101      	bne.n	800482e <memchr+0x12>
 800482a:	2000      	movs	r0, #0
 800482c:	e003      	b.n	8004836 <memchr+0x1a>
 800482e:	7804      	ldrb	r4, [r0, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	428c      	cmp	r4, r1
 8004834:	d1f6      	bne.n	8004824 <memchr+0x8>
 8004836:	bd10      	pop	{r4, pc}

08004838 <__malloc_lock>:
 8004838:	4801      	ldr	r0, [pc, #4]	; (8004840 <__malloc_lock+0x8>)
 800483a:	f7ff bb13 	b.w	8003e64 <__retarget_lock_acquire_recursive>
 800483e:	bf00      	nop
 8004840:	2000019c 	.word	0x2000019c

08004844 <__malloc_unlock>:
 8004844:	4801      	ldr	r0, [pc, #4]	; (800484c <__malloc_unlock+0x8>)
 8004846:	f7ff bb0e 	b.w	8003e66 <__retarget_lock_release_recursive>
 800484a:	bf00      	nop
 800484c:	2000019c 	.word	0x2000019c

08004850 <_read_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4604      	mov	r4, r0
 8004854:	4608      	mov	r0, r1
 8004856:	4611      	mov	r1, r2
 8004858:	2200      	movs	r2, #0
 800485a:	4d05      	ldr	r5, [pc, #20]	; (8004870 <_read_r+0x20>)
 800485c:	602a      	str	r2, [r5, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	f7fc f8f8 	bl	8000a54 <_read>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_read_r+0x1e>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_read_r+0x1e>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	200001a8 	.word	0x200001a8

08004874 <_init>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	bf00      	nop
 8004878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487a:	bc08      	pop	{r3}
 800487c:	469e      	mov	lr, r3
 800487e:	4770      	bx	lr

08004880 <_fini>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	bf00      	nop
 8004884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004886:	bc08      	pop	{r3}
 8004888:	469e      	mov	lr, r3
 800488a:	4770      	bx	lr
